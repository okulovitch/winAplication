//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace kursachMain {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("kursachDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class kursachDataSet : global::System.Data.DataSet {
        
        private Виды_практикиDataTable tableВиды_практики;
        
        private ГруппыDataTable tableГруппы;
        
        private ДоговорыDataTable tableДоговоры;
        
        private ПланНабораDataTable tableПланНабора;
        
        private ПредприятияDataTable tableПредприятия;
        
        private ПреподавателиDataTable tableПреподаватели;
        
        private ПроведениеПрактикиDataTable tableПроведениеПрактики;
        
        private СпециальностиDataTable tableСпециальности;
        
        private СтудентыDataTable tableСтуденты;
        
        private Текущая_практикаDataTable tableТекущая_практика;
        
        private global::System.Data.DataRelation relationFK_Виды_практики_ПроведениеПрактики;
        
        private global::System.Data.DataRelation relationFK_Договоры_Студенты;
        
        private global::System.Data.DataRelation relationFK_Предприятия_Договоры;
        
        private global::System.Data.DataRelation relationFK_Предприятия_ПланНабора;
        
        private global::System.Data.DataRelation relationFK_Студенты_Группы;
        
        private global::System.Data.DataRelation relationFK_Студенты_Специальности;
        
        private global::System.Data.DataRelation relationFK_Текущая_практика_Виды_практики;
        
        private global::System.Data.DataRelation relationFK_Текущая_практика_Договоры;
        
        private global::System.Data.DataRelation relationFK_Текущая_практика_Преподаватели;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public kursachDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected kursachDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["Виды практики"] != null)) {
                    base.Tables.Add(new Виды_практикиDataTable(ds.Tables["Виды практики"]));
                }
                if ((ds.Tables["Группы"] != null)) {
                    base.Tables.Add(new ГруппыDataTable(ds.Tables["Группы"]));
                }
                if ((ds.Tables["Договоры"] != null)) {
                    base.Tables.Add(new ДоговорыDataTable(ds.Tables["Договоры"]));
                }
                if ((ds.Tables["ПланНабора"] != null)) {
                    base.Tables.Add(new ПланНабораDataTable(ds.Tables["ПланНабора"]));
                }
                if ((ds.Tables["Предприятия"] != null)) {
                    base.Tables.Add(new ПредприятияDataTable(ds.Tables["Предприятия"]));
                }
                if ((ds.Tables["Преподаватели"] != null)) {
                    base.Tables.Add(new ПреподавателиDataTable(ds.Tables["Преподаватели"]));
                }
                if ((ds.Tables["ПроведениеПрактики"] != null)) {
                    base.Tables.Add(new ПроведениеПрактикиDataTable(ds.Tables["ПроведениеПрактики"]));
                }
                if ((ds.Tables["Специальности"] != null)) {
                    base.Tables.Add(new СпециальностиDataTable(ds.Tables["Специальности"]));
                }
                if ((ds.Tables["Студенты"] != null)) {
                    base.Tables.Add(new СтудентыDataTable(ds.Tables["Студенты"]));
                }
                if ((ds.Tables["Текущая практика"] != null)) {
                    base.Tables.Add(new Текущая_практикаDataTable(ds.Tables["Текущая практика"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Виды_практикиDataTable Виды_практики {
            get {
                return this.tableВиды_практики;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ГруппыDataTable Группы {
            get {
                return this.tableГруппы;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ДоговорыDataTable Договоры {
            get {
                return this.tableДоговоры;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ПланНабораDataTable ПланНабора {
            get {
                return this.tableПланНабора;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ПредприятияDataTable Предприятия {
            get {
                return this.tableПредприятия;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ПреподавателиDataTable Преподаватели {
            get {
                return this.tableПреподаватели;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ПроведениеПрактикиDataTable ПроведениеПрактики {
            get {
                return this.tableПроведениеПрактики;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public СпециальностиDataTable Специальности {
            get {
                return this.tableСпециальности;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public СтудентыDataTable Студенты {
            get {
                return this.tableСтуденты;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Текущая_практикаDataTable Текущая_практика {
            get {
                return this.tableТекущая_практика;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public override global::System.Data.DataSet Clone() {
            kursachDataSet cln = ((kursachDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Виды практики"] != null)) {
                    base.Tables.Add(new Виды_практикиDataTable(ds.Tables["Виды практики"]));
                }
                if ((ds.Tables["Группы"] != null)) {
                    base.Tables.Add(new ГруппыDataTable(ds.Tables["Группы"]));
                }
                if ((ds.Tables["Договоры"] != null)) {
                    base.Tables.Add(new ДоговорыDataTable(ds.Tables["Договоры"]));
                }
                if ((ds.Tables["ПланНабора"] != null)) {
                    base.Tables.Add(new ПланНабораDataTable(ds.Tables["ПланНабора"]));
                }
                if ((ds.Tables["Предприятия"] != null)) {
                    base.Tables.Add(new ПредприятияDataTable(ds.Tables["Предприятия"]));
                }
                if ((ds.Tables["Преподаватели"] != null)) {
                    base.Tables.Add(new ПреподавателиDataTable(ds.Tables["Преподаватели"]));
                }
                if ((ds.Tables["ПроведениеПрактики"] != null)) {
                    base.Tables.Add(new ПроведениеПрактикиDataTable(ds.Tables["ПроведениеПрактики"]));
                }
                if ((ds.Tables["Специальности"] != null)) {
                    base.Tables.Add(new СпециальностиDataTable(ds.Tables["Специальности"]));
                }
                if ((ds.Tables["Студенты"] != null)) {
                    base.Tables.Add(new СтудентыDataTable(ds.Tables["Студенты"]));
                }
                if ((ds.Tables["Текущая практика"] != null)) {
                    base.Tables.Add(new Текущая_практикаDataTable(ds.Tables["Текущая практика"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars(bool initTable) {
            this.tableВиды_практики = ((Виды_практикиDataTable)(base.Tables["Виды практики"]));
            if ((initTable == true)) {
                if ((this.tableВиды_практики != null)) {
                    this.tableВиды_практики.InitVars();
                }
            }
            this.tableГруппы = ((ГруппыDataTable)(base.Tables["Группы"]));
            if ((initTable == true)) {
                if ((this.tableГруппы != null)) {
                    this.tableГруппы.InitVars();
                }
            }
            this.tableДоговоры = ((ДоговорыDataTable)(base.Tables["Договоры"]));
            if ((initTable == true)) {
                if ((this.tableДоговоры != null)) {
                    this.tableДоговоры.InitVars();
                }
            }
            this.tableПланНабора = ((ПланНабораDataTable)(base.Tables["ПланНабора"]));
            if ((initTable == true)) {
                if ((this.tableПланНабора != null)) {
                    this.tableПланНабора.InitVars();
                }
            }
            this.tableПредприятия = ((ПредприятияDataTable)(base.Tables["Предприятия"]));
            if ((initTable == true)) {
                if ((this.tableПредприятия != null)) {
                    this.tableПредприятия.InitVars();
                }
            }
            this.tableПреподаватели = ((ПреподавателиDataTable)(base.Tables["Преподаватели"]));
            if ((initTable == true)) {
                if ((this.tableПреподаватели != null)) {
                    this.tableПреподаватели.InitVars();
                }
            }
            this.tableПроведениеПрактики = ((ПроведениеПрактикиDataTable)(base.Tables["ПроведениеПрактики"]));
            if ((initTable == true)) {
                if ((this.tableПроведениеПрактики != null)) {
                    this.tableПроведениеПрактики.InitVars();
                }
            }
            this.tableСпециальности = ((СпециальностиDataTable)(base.Tables["Специальности"]));
            if ((initTable == true)) {
                if ((this.tableСпециальности != null)) {
                    this.tableСпециальности.InitVars();
                }
            }
            this.tableСтуденты = ((СтудентыDataTable)(base.Tables["Студенты"]));
            if ((initTable == true)) {
                if ((this.tableСтуденты != null)) {
                    this.tableСтуденты.InitVars();
                }
            }
            this.tableТекущая_практика = ((Текущая_практикаDataTable)(base.Tables["Текущая практика"]));
            if ((initTable == true)) {
                if ((this.tableТекущая_практика != null)) {
                    this.tableТекущая_практика.InitVars();
                }
            }
            this.relationFK_Виды_практики_ПроведениеПрактики = this.Relations["FK_Виды практики_ПроведениеПрактики"];
            this.relationFK_Договоры_Студенты = this.Relations["FK_Договоры_Студенты"];
            this.relationFK_Предприятия_Договоры = this.Relations["FK_Предприятия_Договоры"];
            this.relationFK_Предприятия_ПланНабора = this.Relations["FK_Предприятия_ПланНабора"];
            this.relationFK_Студенты_Группы = this.Relations["FK_Студенты_Группы"];
            this.relationFK_Студенты_Специальности = this.Relations["FK_Студенты_Специальности"];
            this.relationFK_Текущая_практика_Виды_практики = this.Relations["FK_Текущая практика_Виды практики"];
            this.relationFK_Текущая_практика_Договоры = this.Relations["FK_Текущая практика_Договоры"];
            this.relationFK_Текущая_практика_Преподаватели = this.Relations["FK_Текущая практика_Преподаватели"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitClass() {
            this.DataSetName = "kursachDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/kursachDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableВиды_практики = new Виды_практикиDataTable();
            base.Tables.Add(this.tableВиды_практики);
            this.tableГруппы = new ГруппыDataTable();
            base.Tables.Add(this.tableГруппы);
            this.tableДоговоры = new ДоговорыDataTable();
            base.Tables.Add(this.tableДоговоры);
            this.tableПланНабора = new ПланНабораDataTable();
            base.Tables.Add(this.tableПланНабора);
            this.tableПредприятия = new ПредприятияDataTable();
            base.Tables.Add(this.tableПредприятия);
            this.tableПреподаватели = new ПреподавателиDataTable();
            base.Tables.Add(this.tableПреподаватели);
            this.tableПроведениеПрактики = new ПроведениеПрактикиDataTable();
            base.Tables.Add(this.tableПроведениеПрактики);
            this.tableСпециальности = new СпециальностиDataTable();
            base.Tables.Add(this.tableСпециальности);
            this.tableСтуденты = new СтудентыDataTable();
            base.Tables.Add(this.tableСтуденты);
            this.tableТекущая_практика = new Текущая_практикаDataTable();
            base.Tables.Add(this.tableТекущая_практика);
            this.relationFK_Виды_практики_ПроведениеПрактики = new global::System.Data.DataRelation("FK_Виды практики_ПроведениеПрактики", new global::System.Data.DataColumn[] {
                        this.tableПроведениеПрактики.IDПроведенияColumn}, new global::System.Data.DataColumn[] {
                        this.tableВиды_практики.IDПроведенияColumn}, false);
            this.Relations.Add(this.relationFK_Виды_практики_ПроведениеПрактики);
            this.relationFK_Договоры_Студенты = new global::System.Data.DataRelation("FK_Договоры_Студенты", new global::System.Data.DataColumn[] {
                        this.tableСтуденты.IDСтудентаColumn}, new global::System.Data.DataColumn[] {
                        this.tableДоговоры.IDСтудентаColumn}, false);
            this.Relations.Add(this.relationFK_Договоры_Студенты);
            this.relationFK_Предприятия_Договоры = new global::System.Data.DataRelation("FK_Предприятия_Договоры", new global::System.Data.DataColumn[] {
                        this.tableДоговоры.IDДоговораColumn}, new global::System.Data.DataColumn[] {
                        this.tableПредприятия.IDЗаключенныхДоговоровColumn}, false);
            this.Relations.Add(this.relationFK_Предприятия_Договоры);
            this.relationFK_Предприятия_ПланНабора = new global::System.Data.DataRelation("FK_Предприятия_ПланНабора", new global::System.Data.DataColumn[] {
                        this.tableПланНабора.IDНабораНаГодColumn}, new global::System.Data.DataColumn[] {
                        this.tableПредприятия.IDНабораНаГодColumn}, false);
            this.Relations.Add(this.relationFK_Предприятия_ПланНабора);
            this.relationFK_Студенты_Группы = new global::System.Data.DataRelation("FK_Студенты_Группы", new global::System.Data.DataColumn[] {
                        this.tableГруппы.IDГруппыColumn}, new global::System.Data.DataColumn[] {
                        this.tableСтуденты.IDГруппыColumn}, false);
            this.Relations.Add(this.relationFK_Студенты_Группы);
            this.relationFK_Студенты_Специальности = new global::System.Data.DataRelation("FK_Студенты_Специальности", new global::System.Data.DataColumn[] {
                        this.tableСпециальности.IDСпециальностиColumn}, new global::System.Data.DataColumn[] {
                        this.tableСтуденты.IDСпециальностиColumn}, false);
            this.Relations.Add(this.relationFK_Студенты_Специальности);
            this.relationFK_Текущая_практика_Виды_практики = new global::System.Data.DataRelation("FK_Текущая практика_Виды практики", new global::System.Data.DataColumn[] {
                        this.tableВиды_практики.IDпрактикиColumn}, new global::System.Data.DataColumn[] {
                        this.tableТекущая_практика.IDВидаПрактикиColumn}, false);
            this.Relations.Add(this.relationFK_Текущая_практика_Виды_практики);
            this.relationFK_Текущая_практика_Договоры = new global::System.Data.DataRelation("FK_Текущая практика_Договоры", new global::System.Data.DataColumn[] {
                        this.tableДоговоры.IDДоговораColumn}, new global::System.Data.DataColumn[] {
                        this.tableТекущая_практика.IDДоговораColumn}, false);
            this.Relations.Add(this.relationFK_Текущая_практика_Договоры);
            this.relationFK_Текущая_практика_Преподаватели = new global::System.Data.DataRelation("FK_Текущая практика_Преподаватели", new global::System.Data.DataColumn[] {
                        this.tableПреподаватели.IDПреподавателяColumn}, new global::System.Data.DataColumn[] {
                        this.tableТекущая_практика.IDПреподавателяColumn}, false);
            this.Relations.Add(this.relationFK_Текущая_практика_Преподаватели);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeВиды_практики() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeГруппы() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeДоговоры() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeПланНабора() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeПредприятия() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeПреподаватели() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeПроведениеПрактики() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeСпециальности() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeСтуденты() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeТекущая_практика() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            kursachDataSet ds = new kursachDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void Виды_практикиRowChangeEventHandler(object sender, Виды_практикиRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void ГруппыRowChangeEventHandler(object sender, ГруппыRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void ДоговорыRowChangeEventHandler(object sender, ДоговорыRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void ПланНабораRowChangeEventHandler(object sender, ПланНабораRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void ПредприятияRowChangeEventHandler(object sender, ПредприятияRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void ПреподавателиRowChangeEventHandler(object sender, ПреподавателиRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void ПроведениеПрактикиRowChangeEventHandler(object sender, ПроведениеПрактикиRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void СпециальностиRowChangeEventHandler(object sender, СпециальностиRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void СтудентыRowChangeEventHandler(object sender, СтудентыRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void Текущая_практикаRowChangeEventHandler(object sender, Текущая_практикаRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Виды_практикиDataTable : global::System.Data.TypedTableBase<Виды_практикиRow> {
            
            private global::System.Data.DataColumn columnIDпрактики;
            
            private global::System.Data.DataColumn columnНаименование;
            
            private global::System.Data.DataColumn columnIDПроведения;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Виды_практикиDataTable() {
                this.TableName = "Виды практики";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal Виды_практикиDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected Виды_практикиDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IDпрактикиColumn {
                get {
                    return this.columnIDпрактики;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn НаименованиеColumn {
                get {
                    return this.columnНаименование;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IDПроведенияColumn {
                get {
                    return this.columnIDПроведения;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Виды_практикиRow this[int index] {
                get {
                    return ((Виды_практикиRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event Виды_практикиRowChangeEventHandler Виды_практикиRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event Виды_практикиRowChangeEventHandler Виды_практикиRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event Виды_практикиRowChangeEventHandler Виды_практикиRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event Виды_практикиRowChangeEventHandler Виды_практикиRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddВиды_практикиRow(Виды_практикиRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Виды_практикиRow AddВиды_практикиRow(int IDпрактики, string Наименование) {
                Виды_практикиRow rowВиды_практикиRow = ((Виды_практикиRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        IDпрактики,
                        Наименование,
                        null};
                rowВиды_практикиRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowВиды_практикиRow);
                return rowВиды_практикиRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Виды_практикиRow FindByIDпрактики(int IDпрактики) {
                return ((Виды_практикиRow)(this.Rows.Find(new object[] {
                            IDпрактики})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                Виды_практикиDataTable cln = ((Виды_практикиDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Виды_практикиDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnIDпрактики = base.Columns["IDпрактики"];
                this.columnНаименование = base.Columns["Наименование"];
                this.columnIDПроведения = base.Columns["IDПроведения"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnIDпрактики = new global::System.Data.DataColumn("IDпрактики", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDпрактики);
                this.columnНаименование = new global::System.Data.DataColumn("Наименование", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnНаименование);
                this.columnIDПроведения = new global::System.Data.DataColumn("IDПроведения", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDПроведения);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnIDпрактики}, true));
                this.columnIDпрактики.AllowDBNull = false;
                this.columnIDпрактики.Unique = true;
                this.columnНаименование.AllowDBNull = false;
                this.columnНаименование.MaxLength = 50;
                this.columnIDПроведения.AutoIncrement = true;
                this.columnIDПроведения.AutoIncrementSeed = -1;
                this.columnIDПроведения.AutoIncrementStep = -1;
                this.columnIDПроведения.AllowDBNull = false;
                this.columnIDПроведения.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Виды_практикиRow NewВиды_практикиRow() {
                return ((Виды_практикиRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Виды_практикиRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(Виды_практикиRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Виды_практикиRowChanged != null)) {
                    this.Виды_практикиRowChanged(this, new Виды_практикиRowChangeEvent(((Виды_практикиRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Виды_практикиRowChanging != null)) {
                    this.Виды_практикиRowChanging(this, new Виды_практикиRowChangeEvent(((Виды_практикиRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Виды_практикиRowDeleted != null)) {
                    this.Виды_практикиRowDeleted(this, new Виды_практикиRowChangeEvent(((Виды_практикиRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Виды_практикиRowDeleting != null)) {
                    this.Виды_практикиRowDeleting(this, new Виды_практикиRowChangeEvent(((Виды_практикиRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveВиды_практикиRow(Виды_практикиRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                kursachDataSet ds = new kursachDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Виды_практикиDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ГруппыDataTable : global::System.Data.TypedTableBase<ГруппыRow> {
            
            private global::System.Data.DataColumn columnIDГруппы;
            
            private global::System.Data.DataColumn columnНомерГруппы;
            
            private global::System.Data.DataColumn columnФИОКуратора;
            
            private global::System.Data.DataColumn columnФИОСтаросты;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ГруппыDataTable() {
                this.TableName = "Группы";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal ГруппыDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected ГруппыDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IDГруппыColumn {
                get {
                    return this.columnIDГруппы;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn НомерГруппыColumn {
                get {
                    return this.columnНомерГруппы;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ФИОКуратораColumn {
                get {
                    return this.columnФИОКуратора;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ФИОСтаростыColumn {
                get {
                    return this.columnФИОСтаросты;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ГруппыRow this[int index] {
                get {
                    return ((ГруппыRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ГруппыRowChangeEventHandler ГруппыRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ГруппыRowChangeEventHandler ГруппыRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ГруппыRowChangeEventHandler ГруппыRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ГруппыRowChangeEventHandler ГруппыRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddГруппыRow(ГруппыRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ГруппыRow AddГруппыRow(string НомерГруппы, string ФИОКуратора, string ФИОСтаросты) {
                ГруппыRow rowГруппыRow = ((ГруппыRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        НомерГруппы,
                        ФИОКуратора,
                        ФИОСтаросты};
                rowГруппыRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowГруппыRow);
                return rowГруппыRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ГруппыRow FindByIDГруппы(int IDГруппы) {
                return ((ГруппыRow)(this.Rows.Find(new object[] {
                            IDГруппы})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                ГруппыDataTable cln = ((ГруппыDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ГруппыDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnIDГруппы = base.Columns["IDГруппы"];
                this.columnНомерГруппы = base.Columns["НомерГруппы"];
                this.columnФИОКуратора = base.Columns["ФИОКуратора"];
                this.columnФИОСтаросты = base.Columns["ФИОСтаросты"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnIDГруппы = new global::System.Data.DataColumn("IDГруппы", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDГруппы);
                this.columnНомерГруппы = new global::System.Data.DataColumn("НомерГруппы", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnНомерГруппы);
                this.columnФИОКуратора = new global::System.Data.DataColumn("ФИОКуратора", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnФИОКуратора);
                this.columnФИОСтаросты = new global::System.Data.DataColumn("ФИОСтаросты", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnФИОСтаросты);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnIDГруппы}, true));
                this.columnIDГруппы.AutoIncrement = true;
                this.columnIDГруппы.AutoIncrementSeed = -1;
                this.columnIDГруппы.AutoIncrementStep = -1;
                this.columnIDГруппы.AllowDBNull = false;
                this.columnIDГруппы.ReadOnly = true;
                this.columnIDГруппы.Unique = true;
                this.columnНомерГруппы.AllowDBNull = false;
                this.columnНомерГруппы.MaxLength = 50;
                this.columnФИОКуратора.MaxLength = 50;
                this.columnФИОСтаросты.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ГруппыRow NewГруппыRow() {
                return ((ГруппыRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ГруппыRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(ГруппыRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ГруппыRowChanged != null)) {
                    this.ГруппыRowChanged(this, new ГруппыRowChangeEvent(((ГруппыRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ГруппыRowChanging != null)) {
                    this.ГруппыRowChanging(this, new ГруппыRowChangeEvent(((ГруппыRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ГруппыRowDeleted != null)) {
                    this.ГруппыRowDeleted(this, new ГруппыRowChangeEvent(((ГруппыRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ГруппыRowDeleting != null)) {
                    this.ГруппыRowDeleting(this, new ГруппыRowChangeEvent(((ГруппыRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveГруппыRow(ГруппыRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                kursachDataSet ds = new kursachDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ГруппыDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ДоговорыDataTable : global::System.Data.TypedTableBase<ДоговорыRow> {
            
            private global::System.Data.DataColumn columnIDДоговора;
            
            private global::System.Data.DataColumn columnНомерДоговора;
            
            private global::System.Data.DataColumn columnДатаЗаключения;
            
            private global::System.Data.DataColumn columnФИОИсполнителя;
            
            private global::System.Data.DataColumn columnДолжностьИсполнителя;
            
            private global::System.Data.DataColumn columnНазваниеПредприятия;
            
            private global::System.Data.DataColumn columnУченаяСтепень;
            
            private global::System.Data.DataColumn columnЗвание;
            
            private global::System.Data.DataColumn columnСерияПаспорта;
            
            private global::System.Data.DataColumn columnНомерПаспорта;
            
            private global::System.Data.DataColumn columnДатаВыдачи;
            
            private global::System.Data.DataColumn columnОрганВыдачи;
            
            private global::System.Data.DataColumn columnИдентификационныйНомер;
            
            private global::System.Data.DataColumn columnНомерСтраховогоСвидетельства;
            
            private global::System.Data.DataColumn columnДомашнийАдрес;
            
            private global::System.Data.DataColumn columnТелРабочий;
            
            private global::System.Data.DataColumn columnТелДомашний;
            
            private global::System.Data.DataColumn columnМестоОсновнойРаботы;
            
            private global::System.Data.DataColumn columnIDСтудента;
            
            private global::System.Data.DataColumn columnДатаПроведения;
            
            private global::System.Data.DataColumn columnКоличествоЧасов;
            
            private global::System.Data.DataColumn columnСтоимостьОдногоЧаса;
            
            private global::System.Data.DataColumn columnОбщаяСумма;
            
            private global::System.Data.DataColumn columnНомерПриказа;
            
            private global::System.Data.DataColumn columnДатаПриказа;
            
            private global::System.Data.DataColumn columnФИООтделаКадров;
            
            private global::System.Data.DataColumn columnФИОЗавКафедрой;
            
            private global::System.Data.DataColumn columnНазваниеКафедры;
            
            private global::System.Data.DataColumn columnРуководительПрактики;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ДоговорыDataTable() {
                this.TableName = "Договоры";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal ДоговорыDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected ДоговорыDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IDДоговораColumn {
                get {
                    return this.columnIDДоговора;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn НомерДоговораColumn {
                get {
                    return this.columnНомерДоговора;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ДатаЗаключенияColumn {
                get {
                    return this.columnДатаЗаключения;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ФИОИсполнителяColumn {
                get {
                    return this.columnФИОИсполнителя;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ДолжностьИсполнителяColumn {
                get {
                    return this.columnДолжностьИсполнителя;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn НазваниеПредприятияColumn {
                get {
                    return this.columnНазваниеПредприятия;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn УченаяСтепеньColumn {
                get {
                    return this.columnУченаяСтепень;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ЗваниеColumn {
                get {
                    return this.columnЗвание;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn СерияПаспортаColumn {
                get {
                    return this.columnСерияПаспорта;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn НомерПаспортаColumn {
                get {
                    return this.columnНомерПаспорта;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ДатаВыдачиColumn {
                get {
                    return this.columnДатаВыдачи;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ОрганВыдачиColumn {
                get {
                    return this.columnОрганВыдачи;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ИдентификационныйНомерColumn {
                get {
                    return this.columnИдентификационныйНомер;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn НомерСтраховогоСвидетельстваColumn {
                get {
                    return this.columnНомерСтраховогоСвидетельства;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ДомашнийАдресColumn {
                get {
                    return this.columnДомашнийАдрес;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ТелРабочийColumn {
                get {
                    return this.columnТелРабочий;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ТелДомашнийColumn {
                get {
                    return this.columnТелДомашний;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn МестоОсновнойРаботыColumn {
                get {
                    return this.columnМестоОсновнойРаботы;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IDСтудентаColumn {
                get {
                    return this.columnIDСтудента;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ДатаПроведенияColumn {
                get {
                    return this.columnДатаПроведения;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn КоличествоЧасовColumn {
                get {
                    return this.columnКоличествоЧасов;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn СтоимостьОдногоЧасаColumn {
                get {
                    return this.columnСтоимостьОдногоЧаса;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ОбщаяСуммаColumn {
                get {
                    return this.columnОбщаяСумма;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn НомерПриказаColumn {
                get {
                    return this.columnНомерПриказа;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ДатаПриказаColumn {
                get {
                    return this.columnДатаПриказа;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ФИООтделаКадровColumn {
                get {
                    return this.columnФИООтделаКадров;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ФИОЗавКафедройColumn {
                get {
                    return this.columnФИОЗавКафедрой;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn НазваниеКафедрыColumn {
                get {
                    return this.columnНазваниеКафедры;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn РуководительПрактикиColumn {
                get {
                    return this.columnРуководительПрактики;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ДоговорыRow this[int index] {
                get {
                    return ((ДоговорыRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ДоговорыRowChangeEventHandler ДоговорыRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ДоговорыRowChangeEventHandler ДоговорыRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ДоговорыRowChangeEventHandler ДоговорыRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ДоговорыRowChangeEventHandler ДоговорыRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddДоговорыRow(ДоговорыRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ДоговорыRow AddДоговорыRow(
                        int IDДоговора, 
                        string НомерДоговора, 
                        string ДатаЗаключения, 
                        string ФИОИсполнителя, 
                        string ДолжностьИсполнителя, 
                        string НазваниеПредприятия, 
                        string УченаяСтепень, 
                        string Звание, 
                        string СерияПаспорта, 
                        string НомерПаспорта, 
                        string ДатаВыдачи, 
                        string ОрганВыдачи, 
                        string ИдентификационныйНомер, 
                        string НомерСтраховогоСвидетельства, 
                        string ДомашнийАдрес, 
                        string ТелРабочий, 
                        string ТелДомашний, 
                        string МестоОсновнойРаботы, 
                        string ДатаПроведения, 
                        string КоличествоЧасов, 
                        string СтоимостьОдногоЧаса, 
                        string ОбщаяСумма, 
                        string НомерПриказа, 
                        string ДатаПриказа, 
                        string ФИООтделаКадров, 
                        string ФИОЗавКафедрой, 
                        string НазваниеКафедры, 
                        string РуководительПрактики) {
                ДоговорыRow rowДоговорыRow = ((ДоговорыRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        IDДоговора,
                        НомерДоговора,
                        ДатаЗаключения,
                        ФИОИсполнителя,
                        ДолжностьИсполнителя,
                        НазваниеПредприятия,
                        УченаяСтепень,
                        Звание,
                        СерияПаспорта,
                        НомерПаспорта,
                        ДатаВыдачи,
                        ОрганВыдачи,
                        ИдентификационныйНомер,
                        НомерСтраховогоСвидетельства,
                        ДомашнийАдрес,
                        ТелРабочий,
                        ТелДомашний,
                        МестоОсновнойРаботы,
                        null,
                        ДатаПроведения,
                        КоличествоЧасов,
                        СтоимостьОдногоЧаса,
                        ОбщаяСумма,
                        НомерПриказа,
                        ДатаПриказа,
                        ФИООтделаКадров,
                        ФИОЗавКафедрой,
                        НазваниеКафедры,
                        РуководительПрактики};
                rowДоговорыRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowДоговорыRow);
                return rowДоговорыRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ДоговорыRow FindByIDДоговора(int IDДоговора) {
                return ((ДоговорыRow)(this.Rows.Find(new object[] {
                            IDДоговора})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                ДоговорыDataTable cln = ((ДоговорыDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ДоговорыDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnIDДоговора = base.Columns["IDДоговора"];
                this.columnНомерДоговора = base.Columns["НомерДоговора"];
                this.columnДатаЗаключения = base.Columns["ДатаЗаключения"];
                this.columnФИОИсполнителя = base.Columns["ФИОИсполнителя"];
                this.columnДолжностьИсполнителя = base.Columns["ДолжностьИсполнителя"];
                this.columnНазваниеПредприятия = base.Columns["НазваниеПредприятия"];
                this.columnУченаяСтепень = base.Columns["УченаяСтепень"];
                this.columnЗвание = base.Columns["Звание"];
                this.columnСерияПаспорта = base.Columns["СерияПаспорта"];
                this.columnНомерПаспорта = base.Columns["НомерПаспорта"];
                this.columnДатаВыдачи = base.Columns["ДатаВыдачи"];
                this.columnОрганВыдачи = base.Columns["ОрганВыдачи"];
                this.columnИдентификационныйНомер = base.Columns["ИдентификационныйНомер"];
                this.columnНомерСтраховогоСвидетельства = base.Columns["НомерСтраховогоСвидетельства"];
                this.columnДомашнийАдрес = base.Columns["ДомашнийАдрес"];
                this.columnТелРабочий = base.Columns["ТелРабочий"];
                this.columnТелДомашний = base.Columns["ТелДомашний"];
                this.columnМестоОсновнойРаботы = base.Columns["МестоОсновнойРаботы"];
                this.columnIDСтудента = base.Columns["IDСтудента"];
                this.columnДатаПроведения = base.Columns["ДатаПроведения"];
                this.columnКоличествоЧасов = base.Columns["КоличествоЧасов"];
                this.columnСтоимостьОдногоЧаса = base.Columns["СтоимостьОдногоЧаса"];
                this.columnОбщаяСумма = base.Columns["ОбщаяСумма"];
                this.columnНомерПриказа = base.Columns["НомерПриказа"];
                this.columnДатаПриказа = base.Columns["ДатаПриказа"];
                this.columnФИООтделаКадров = base.Columns["ФИООтделаКадров"];
                this.columnФИОЗавКафедрой = base.Columns["ФИОЗавКафедрой"];
                this.columnНазваниеКафедры = base.Columns["НазваниеКафедры"];
                this.columnРуководительПрактики = base.Columns["РуководительПрактики"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnIDДоговора = new global::System.Data.DataColumn("IDДоговора", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDДоговора);
                this.columnНомерДоговора = new global::System.Data.DataColumn("НомерДоговора", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnНомерДоговора);
                this.columnДатаЗаключения = new global::System.Data.DataColumn("ДатаЗаключения", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnДатаЗаключения);
                this.columnФИОИсполнителя = new global::System.Data.DataColumn("ФИОИсполнителя", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnФИОИсполнителя);
                this.columnДолжностьИсполнителя = new global::System.Data.DataColumn("ДолжностьИсполнителя", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnДолжностьИсполнителя);
                this.columnНазваниеПредприятия = new global::System.Data.DataColumn("НазваниеПредприятия", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnНазваниеПредприятия);
                this.columnУченаяСтепень = new global::System.Data.DataColumn("УченаяСтепень", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnУченаяСтепень);
                this.columnЗвание = new global::System.Data.DataColumn("Звание", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnЗвание);
                this.columnСерияПаспорта = new global::System.Data.DataColumn("СерияПаспорта", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnСерияПаспорта);
                this.columnНомерПаспорта = new global::System.Data.DataColumn("НомерПаспорта", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnНомерПаспорта);
                this.columnДатаВыдачи = new global::System.Data.DataColumn("ДатаВыдачи", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnДатаВыдачи);
                this.columnОрганВыдачи = new global::System.Data.DataColumn("ОрганВыдачи", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnОрганВыдачи);
                this.columnИдентификационныйНомер = new global::System.Data.DataColumn("ИдентификационныйНомер", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnИдентификационныйНомер);
                this.columnНомерСтраховогоСвидетельства = new global::System.Data.DataColumn("НомерСтраховогоСвидетельства", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnНомерСтраховогоСвидетельства);
                this.columnДомашнийАдрес = new global::System.Data.DataColumn("ДомашнийАдрес", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnДомашнийАдрес);
                this.columnТелРабочий = new global::System.Data.DataColumn("ТелРабочий", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnТелРабочий);
                this.columnТелДомашний = new global::System.Data.DataColumn("ТелДомашний", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnТелДомашний);
                this.columnМестоОсновнойРаботы = new global::System.Data.DataColumn("МестоОсновнойРаботы", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnМестоОсновнойРаботы);
                this.columnIDСтудента = new global::System.Data.DataColumn("IDСтудента", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDСтудента);
                this.columnДатаПроведения = new global::System.Data.DataColumn("ДатаПроведения", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnДатаПроведения);
                this.columnКоличествоЧасов = new global::System.Data.DataColumn("КоличествоЧасов", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnКоличествоЧасов);
                this.columnСтоимостьОдногоЧаса = new global::System.Data.DataColumn("СтоимостьОдногоЧаса", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnСтоимостьОдногоЧаса);
                this.columnОбщаяСумма = new global::System.Data.DataColumn("ОбщаяСумма", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnОбщаяСумма);
                this.columnНомерПриказа = new global::System.Data.DataColumn("НомерПриказа", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnНомерПриказа);
                this.columnДатаПриказа = new global::System.Data.DataColumn("ДатаПриказа", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnДатаПриказа);
                this.columnФИООтделаКадров = new global::System.Data.DataColumn("ФИООтделаКадров", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnФИООтделаКадров);
                this.columnФИОЗавКафедрой = new global::System.Data.DataColumn("ФИОЗавКафедрой", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnФИОЗавКафедрой);
                this.columnНазваниеКафедры = new global::System.Data.DataColumn("НазваниеКафедры", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnНазваниеКафедры);
                this.columnРуководительПрактики = new global::System.Data.DataColumn("РуководительПрактики", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnРуководительПрактики);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnIDДоговора}, true));
                this.columnIDДоговора.AllowDBNull = false;
                this.columnIDДоговора.Unique = true;
                this.columnНомерДоговора.AllowDBNull = false;
                this.columnНомерДоговора.MaxLength = 50;
                this.columnДатаЗаключения.AllowDBNull = false;
                this.columnДатаЗаключения.MaxLength = 50;
                this.columnФИОИсполнителя.AllowDBNull = false;
                this.columnФИОИсполнителя.MaxLength = 50;
                this.columnДолжностьИсполнителя.AllowDBNull = false;
                this.columnДолжностьИсполнителя.MaxLength = 50;
                this.columnНазваниеПредприятия.AllowDBNull = false;
                this.columnНазваниеПредприятия.MaxLength = 50;
                this.columnУченаяСтепень.MaxLength = 50;
                this.columnЗвание.MaxLength = 50;
                this.columnСерияПаспорта.AllowDBNull = false;
                this.columnСерияПаспорта.MaxLength = 50;
                this.columnНомерПаспорта.AllowDBNull = false;
                this.columnНомерПаспорта.MaxLength = 50;
                this.columnДатаВыдачи.AllowDBNull = false;
                this.columnДатаВыдачи.MaxLength = 50;
                this.columnОрганВыдачи.AllowDBNull = false;
                this.columnОрганВыдачи.MaxLength = 50;
                this.columnИдентификационныйНомер.AllowDBNull = false;
                this.columnИдентификационныйНомер.MaxLength = 50;
                this.columnНомерСтраховогоСвидетельства.MaxLength = 50;
                this.columnДомашнийАдрес.AllowDBNull = false;
                this.columnДомашнийАдрес.MaxLength = 50;
                this.columnТелРабочий.AllowDBNull = false;
                this.columnТелРабочий.MaxLength = 50;
                this.columnТелДомашний.MaxLength = 50;
                this.columnМестоОсновнойРаботы.MaxLength = 50;
                this.columnIDСтудента.AutoIncrement = true;
                this.columnIDСтудента.AutoIncrementSeed = -1;
                this.columnIDСтудента.AutoIncrementStep = -1;
                this.columnIDСтудента.AllowDBNull = false;
                this.columnIDСтудента.ReadOnly = true;
                this.columnДатаПроведения.AllowDBNull = false;
                this.columnДатаПроведения.MaxLength = 50;
                this.columnКоличествоЧасов.AllowDBNull = false;
                this.columnКоличествоЧасов.MaxLength = 50;
                this.columnСтоимостьОдногоЧаса.AllowDBNull = false;
                this.columnСтоимостьОдногоЧаса.MaxLength = 50;
                this.columnОбщаяСумма.AllowDBNull = false;
                this.columnОбщаяСумма.MaxLength = 50;
                this.columnНомерПриказа.AllowDBNull = false;
                this.columnНомерПриказа.MaxLength = 50;
                this.columnДатаПриказа.AllowDBNull = false;
                this.columnДатаПриказа.MaxLength = 50;
                this.columnФИООтделаКадров.MaxLength = 50;
                this.columnФИОЗавКафедрой.AllowDBNull = false;
                this.columnФИОЗавКафедрой.MaxLength = 50;
                this.columnНазваниеКафедры.AllowDBNull = false;
                this.columnНазваниеКафедры.MaxLength = 50;
                this.columnРуководительПрактики.AllowDBNull = false;
                this.columnРуководительПрактики.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ДоговорыRow NewДоговорыRow() {
                return ((ДоговорыRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ДоговорыRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(ДоговорыRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ДоговорыRowChanged != null)) {
                    this.ДоговорыRowChanged(this, new ДоговорыRowChangeEvent(((ДоговорыRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ДоговорыRowChanging != null)) {
                    this.ДоговорыRowChanging(this, new ДоговорыRowChangeEvent(((ДоговорыRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ДоговорыRowDeleted != null)) {
                    this.ДоговорыRowDeleted(this, new ДоговорыRowChangeEvent(((ДоговорыRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ДоговорыRowDeleting != null)) {
                    this.ДоговорыRowDeleting(this, new ДоговорыRowChangeEvent(((ДоговорыRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveДоговорыRow(ДоговорыRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                kursachDataSet ds = new kursachDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ДоговорыDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ПланНабораDataTable : global::System.Data.TypedTableBase<ПланНабораRow> {
            
            private global::System.Data.DataColumn columnIDНабораНаГод;
            
            private global::System.Data.DataColumn columnГод;
            
            private global::System.Data.DataColumn columnМаксКолвоСтудентов;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ПланНабораDataTable() {
                this.TableName = "ПланНабора";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal ПланНабораDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected ПланНабораDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IDНабораНаГодColumn {
                get {
                    return this.columnIDНабораНаГод;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ГодColumn {
                get {
                    return this.columnГод;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn МаксКолвоСтудентовColumn {
                get {
                    return this.columnМаксКолвоСтудентов;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ПланНабораRow this[int index] {
                get {
                    return ((ПланНабораRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ПланНабораRowChangeEventHandler ПланНабораRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ПланНабораRowChangeEventHandler ПланНабораRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ПланНабораRowChangeEventHandler ПланНабораRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ПланНабораRowChangeEventHandler ПланНабораRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddПланНабораRow(ПланНабораRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ПланНабораRow AddПланНабораRow(string Год, string МаксКолвоСтудентов) {
                ПланНабораRow rowПланНабораRow = ((ПланНабораRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Год,
                        МаксКолвоСтудентов};
                rowПланНабораRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowПланНабораRow);
                return rowПланНабораRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ПланНабораRow FindByIDНабораНаГод(int IDНабораНаГод) {
                return ((ПланНабораRow)(this.Rows.Find(new object[] {
                            IDНабораНаГод})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                ПланНабораDataTable cln = ((ПланНабораDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ПланНабораDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnIDНабораНаГод = base.Columns["IDНабораНаГод"];
                this.columnГод = base.Columns["Год"];
                this.columnМаксКолвоСтудентов = base.Columns["МаксКолвоСтудентов"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnIDНабораНаГод = new global::System.Data.DataColumn("IDНабораНаГод", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDНабораНаГод);
                this.columnГод = new global::System.Data.DataColumn("Год", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnГод);
                this.columnМаксКолвоСтудентов = new global::System.Data.DataColumn("МаксКолвоСтудентов", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnМаксКолвоСтудентов);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnIDНабораНаГод}, true));
                this.columnIDНабораНаГод.AutoIncrement = true;
                this.columnIDНабораНаГод.AutoIncrementSeed = -1;
                this.columnIDНабораНаГод.AutoIncrementStep = -1;
                this.columnIDНабораНаГод.AllowDBNull = false;
                this.columnIDНабораНаГод.ReadOnly = true;
                this.columnIDНабораНаГод.Unique = true;
                this.columnГод.AllowDBNull = false;
                this.columnГод.MaxLength = 50;
                this.columnМаксКолвоСтудентов.AllowDBNull = false;
                this.columnМаксКолвоСтудентов.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ПланНабораRow NewПланНабораRow() {
                return ((ПланНабораRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ПланНабораRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(ПланНабораRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ПланНабораRowChanged != null)) {
                    this.ПланНабораRowChanged(this, new ПланНабораRowChangeEvent(((ПланНабораRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ПланНабораRowChanging != null)) {
                    this.ПланНабораRowChanging(this, new ПланНабораRowChangeEvent(((ПланНабораRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ПланНабораRowDeleted != null)) {
                    this.ПланНабораRowDeleted(this, new ПланНабораRowChangeEvent(((ПланНабораRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ПланНабораRowDeleting != null)) {
                    this.ПланНабораRowDeleting(this, new ПланНабораRowChangeEvent(((ПланНабораRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveПланНабораRow(ПланНабораRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                kursachDataSet ds = new kursachDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ПланНабораDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ПредприятияDataTable : global::System.Data.TypedTableBase<ПредприятияRow> {
            
            private global::System.Data.DataColumn columnID_предприятия;
            
            private global::System.Data.DataColumn columnНазвание;
            
            private global::System.Data.DataColumn columnУНП;
            
            private global::System.Data.DataColumn columnАдрес;
            
            private global::System.Data.DataColumn columnТелефон;
            
            private global::System.Data.DataColumn columnЭл__почта;
            
            private global::System.Data.DataColumn columnКонтактное_лицо;
            
            private global::System.Data.DataColumn columnIDЗаключенныхДоговоров;
            
            private global::System.Data.DataColumn columnIDНабораНаГод;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ПредприятияDataTable() {
                this.TableName = "Предприятия";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal ПредприятияDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected ПредприятияDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ID_предприятияColumn {
                get {
                    return this.columnID_предприятия;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn НазваниеColumn {
                get {
                    return this.columnНазвание;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn УНПColumn {
                get {
                    return this.columnУНП;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn АдресColumn {
                get {
                    return this.columnАдрес;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ТелефонColumn {
                get {
                    return this.columnТелефон;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn Эл__почтаColumn {
                get {
                    return this.columnЭл__почта;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn Контактное_лицоColumn {
                get {
                    return this.columnКонтактное_лицо;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IDЗаключенныхДоговоровColumn {
                get {
                    return this.columnIDЗаключенныхДоговоров;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IDНабораНаГодColumn {
                get {
                    return this.columnIDНабораНаГод;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ПредприятияRow this[int index] {
                get {
                    return ((ПредприятияRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ПредприятияRowChangeEventHandler ПредприятияRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ПредприятияRowChangeEventHandler ПредприятияRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ПредприятияRowChangeEventHandler ПредприятияRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ПредприятияRowChangeEventHandler ПредприятияRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddПредприятияRow(ПредприятияRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ПредприятияRow AddПредприятияRow(string Название, string УНП, string Адрес, string Телефон, string Эл__почта, string Контактное_лицо, ДоговорыRow parentДоговорыRowByFK_Предприятия_Договоры, ПланНабораRow parentПланНабораRowByFK_Предприятия_ПланНабора) {
                ПредприятияRow rowПредприятияRow = ((ПредприятияRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Название,
                        УНП,
                        Адрес,
                        Телефон,
                        Эл__почта,
                        Контактное_лицо,
                        null,
                        null};
                if ((parentДоговорыRowByFK_Предприятия_Договоры != null)) {
                    columnValuesArray[7] = parentДоговорыRowByFK_Предприятия_Договоры[0];
                }
                if ((parentПланНабораRowByFK_Предприятия_ПланНабора != null)) {
                    columnValuesArray[8] = parentПланНабораRowByFK_Предприятия_ПланНабора[0];
                }
                rowПредприятияRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowПредприятияRow);
                return rowПредприятияRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ПредприятияRow FindByID_предприятия(int ID_предприятия) {
                return ((ПредприятияRow)(this.Rows.Find(new object[] {
                            ID_предприятия})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                ПредприятияDataTable cln = ((ПредприятияDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ПредприятияDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnID_предприятия = base.Columns["ID предприятия"];
                this.columnНазвание = base.Columns["Название"];
                this.columnУНП = base.Columns["УНП"];
                this.columnАдрес = base.Columns["Адрес"];
                this.columnТелефон = base.Columns["Телефон"];
                this.columnЭл__почта = base.Columns["Эл_ почта"];
                this.columnКонтактное_лицо = base.Columns["Контактное лицо"];
                this.columnIDЗаключенныхДоговоров = base.Columns["IDЗаключенныхДоговоров"];
                this.columnIDНабораНаГод = base.Columns["IDНабораНаГод"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnID_предприятия = new global::System.Data.DataColumn("ID предприятия", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID_предприятия);
                this.columnНазвание = new global::System.Data.DataColumn("Название", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnНазвание);
                this.columnУНП = new global::System.Data.DataColumn("УНП", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnУНП);
                this.columnАдрес = new global::System.Data.DataColumn("Адрес", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnАдрес);
                this.columnТелефон = new global::System.Data.DataColumn("Телефон", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnТелефон);
                this.columnЭл__почта = new global::System.Data.DataColumn("Эл_ почта", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnЭл__почта);
                this.columnКонтактное_лицо = new global::System.Data.DataColumn("Контактное лицо", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnКонтактное_лицо);
                this.columnIDЗаключенныхДоговоров = new global::System.Data.DataColumn("IDЗаключенныхДоговоров", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDЗаключенныхДоговоров);
                this.columnIDНабораНаГод = new global::System.Data.DataColumn("IDНабораНаГод", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDНабораНаГод);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnID_предприятия}, true));
                this.columnID_предприятия.AutoIncrement = true;
                this.columnID_предприятия.AutoIncrementSeed = -1;
                this.columnID_предприятия.AutoIncrementStep = -1;
                this.columnID_предприятия.AllowDBNull = false;
                this.columnID_предприятия.ReadOnly = true;
                this.columnID_предприятия.Unique = true;
                this.columnНазвание.AllowDBNull = false;
                this.columnНазвание.MaxLength = 50;
                this.columnУНП.AllowDBNull = false;
                this.columnУНП.MaxLength = 50;
                this.columnАдрес.AllowDBNull = false;
                this.columnАдрес.MaxLength = 50;
                this.columnТелефон.AllowDBNull = false;
                this.columnТелефон.MaxLength = 50;
                this.columnЭл__почта.MaxLength = 50;
                this.columnКонтактное_лицо.AllowDBNull = false;
                this.columnКонтактное_лицо.MaxLength = 50;
                this.columnIDЗаключенныхДоговоров.AllowDBNull = false;
                this.columnIDНабораНаГод.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ПредприятияRow NewПредприятияRow() {
                return ((ПредприятияRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ПредприятияRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(ПредприятияRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ПредприятияRowChanged != null)) {
                    this.ПредприятияRowChanged(this, new ПредприятияRowChangeEvent(((ПредприятияRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ПредприятияRowChanging != null)) {
                    this.ПредприятияRowChanging(this, new ПредприятияRowChangeEvent(((ПредприятияRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ПредприятияRowDeleted != null)) {
                    this.ПредприятияRowDeleted(this, new ПредприятияRowChangeEvent(((ПредприятияRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ПредприятияRowDeleting != null)) {
                    this.ПредприятияRowDeleting(this, new ПредприятияRowChangeEvent(((ПредприятияRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveПредприятияRow(ПредприятияRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                kursachDataSet ds = new kursachDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ПредприятияDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ПреподавателиDataTable : global::System.Data.TypedTableBase<ПреподавателиRow> {
            
            private global::System.Data.DataColumn columnIDПреподавателя;
            
            private global::System.Data.DataColumn columnФИОПреподавателя;
            
            private global::System.Data.DataColumn columnДолжность;
            
            private global::System.Data.DataColumn columnКафедра;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ПреподавателиDataTable() {
                this.TableName = "Преподаватели";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal ПреподавателиDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected ПреподавателиDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IDПреподавателяColumn {
                get {
                    return this.columnIDПреподавателя;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ФИОПреподавателяColumn {
                get {
                    return this.columnФИОПреподавателя;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ДолжностьColumn {
                get {
                    return this.columnДолжность;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn КафедраColumn {
                get {
                    return this.columnКафедра;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ПреподавателиRow this[int index] {
                get {
                    return ((ПреподавателиRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ПреподавателиRowChangeEventHandler ПреподавателиRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ПреподавателиRowChangeEventHandler ПреподавателиRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ПреподавателиRowChangeEventHandler ПреподавателиRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ПреподавателиRowChangeEventHandler ПреподавателиRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddПреподавателиRow(ПреподавателиRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ПреподавателиRow AddПреподавателиRow(string ФИОПреподавателя, string Должность, string Кафедра) {
                ПреподавателиRow rowПреподавателиRow = ((ПреподавателиRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        ФИОПреподавателя,
                        Должность,
                        Кафедра};
                rowПреподавателиRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowПреподавателиRow);
                return rowПреподавателиRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ПреподавателиRow FindByIDПреподавателя(int IDПреподавателя) {
                return ((ПреподавателиRow)(this.Rows.Find(new object[] {
                            IDПреподавателя})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                ПреподавателиDataTable cln = ((ПреподавателиDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ПреподавателиDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnIDПреподавателя = base.Columns["IDПреподавателя"];
                this.columnФИОПреподавателя = base.Columns["ФИОПреподавателя"];
                this.columnДолжность = base.Columns["Должность"];
                this.columnКафедра = base.Columns["Кафедра"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnIDПреподавателя = new global::System.Data.DataColumn("IDПреподавателя", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDПреподавателя);
                this.columnФИОПреподавателя = new global::System.Data.DataColumn("ФИОПреподавателя", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnФИОПреподавателя);
                this.columnДолжность = new global::System.Data.DataColumn("Должность", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnДолжность);
                this.columnКафедра = new global::System.Data.DataColumn("Кафедра", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnКафедра);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnIDПреподавателя}, true));
                this.columnIDПреподавателя.AutoIncrement = true;
                this.columnIDПреподавателя.AutoIncrementSeed = -1;
                this.columnIDПреподавателя.AutoIncrementStep = -1;
                this.columnIDПреподавателя.AllowDBNull = false;
                this.columnIDПреподавателя.ReadOnly = true;
                this.columnIDПреподавателя.Unique = true;
                this.columnФИОПреподавателя.AllowDBNull = false;
                this.columnФИОПреподавателя.MaxLength = 50;
                this.columnДолжность.MaxLength = 50;
                this.columnКафедра.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ПреподавателиRow NewПреподавателиRow() {
                return ((ПреподавателиRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ПреподавателиRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(ПреподавателиRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ПреподавателиRowChanged != null)) {
                    this.ПреподавателиRowChanged(this, new ПреподавателиRowChangeEvent(((ПреподавателиRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ПреподавателиRowChanging != null)) {
                    this.ПреподавателиRowChanging(this, new ПреподавателиRowChangeEvent(((ПреподавателиRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ПреподавателиRowDeleted != null)) {
                    this.ПреподавателиRowDeleted(this, new ПреподавателиRowChangeEvent(((ПреподавателиRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ПреподавателиRowDeleting != null)) {
                    this.ПреподавателиRowDeleting(this, new ПреподавателиRowChangeEvent(((ПреподавателиRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveПреподавателиRow(ПреподавателиRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                kursachDataSet ds = new kursachDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ПреподавателиDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ПроведениеПрактикиDataTable : global::System.Data.TypedTableBase<ПроведениеПрактикиRow> {
            
            private global::System.Data.DataColumn columnIDПроведения;
            
            private global::System.Data.DataColumn columnГод;
            
            private global::System.Data.DataColumn columnПроизводственная;
            
            private global::System.Data.DataColumn columnПреддипломная;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ПроведениеПрактикиDataTable() {
                this.TableName = "ПроведениеПрактики";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal ПроведениеПрактикиDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected ПроведениеПрактикиDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IDПроведенияColumn {
                get {
                    return this.columnIDПроведения;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ГодColumn {
                get {
                    return this.columnГод;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ПроизводственнаяColumn {
                get {
                    return this.columnПроизводственная;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ПреддипломнаяColumn {
                get {
                    return this.columnПреддипломная;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ПроведениеПрактикиRow this[int index] {
                get {
                    return ((ПроведениеПрактикиRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ПроведениеПрактикиRowChangeEventHandler ПроведениеПрактикиRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ПроведениеПрактикиRowChangeEventHandler ПроведениеПрактикиRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ПроведениеПрактикиRowChangeEventHandler ПроведениеПрактикиRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ПроведениеПрактикиRowChangeEventHandler ПроведениеПрактикиRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddПроведениеПрактикиRow(ПроведениеПрактикиRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ПроведениеПрактикиRow AddПроведениеПрактикиRow(string Год, string Производственная, string Преддипломная) {
                ПроведениеПрактикиRow rowПроведениеПрактикиRow = ((ПроведениеПрактикиRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Год,
                        Производственная,
                        Преддипломная};
                rowПроведениеПрактикиRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowПроведениеПрактикиRow);
                return rowПроведениеПрактикиRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ПроведениеПрактикиRow FindByIDПроведения(int IDПроведения) {
                return ((ПроведениеПрактикиRow)(this.Rows.Find(new object[] {
                            IDПроведения})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                ПроведениеПрактикиDataTable cln = ((ПроведениеПрактикиDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ПроведениеПрактикиDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnIDПроведения = base.Columns["IDПроведения"];
                this.columnГод = base.Columns["Год"];
                this.columnПроизводственная = base.Columns["Производственная"];
                this.columnПреддипломная = base.Columns["Преддипломная"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnIDПроведения = new global::System.Data.DataColumn("IDПроведения", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDПроведения);
                this.columnГод = new global::System.Data.DataColumn("Год", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnГод);
                this.columnПроизводственная = new global::System.Data.DataColumn("Производственная", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnПроизводственная);
                this.columnПреддипломная = new global::System.Data.DataColumn("Преддипломная", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnПреддипломная);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnIDПроведения}, true));
                this.columnIDПроведения.AutoIncrement = true;
                this.columnIDПроведения.AutoIncrementSeed = -1;
                this.columnIDПроведения.AutoIncrementStep = -1;
                this.columnIDПроведения.AllowDBNull = false;
                this.columnIDПроведения.ReadOnly = true;
                this.columnIDПроведения.Unique = true;
                this.columnГод.AllowDBNull = false;
                this.columnГод.MaxLength = 50;
                this.columnПроизводственная.AllowDBNull = false;
                this.columnПроизводственная.MaxLength = 50;
                this.columnПреддипломная.AllowDBNull = false;
                this.columnПреддипломная.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ПроведениеПрактикиRow NewПроведениеПрактикиRow() {
                return ((ПроведениеПрактикиRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ПроведениеПрактикиRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(ПроведениеПрактикиRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ПроведениеПрактикиRowChanged != null)) {
                    this.ПроведениеПрактикиRowChanged(this, new ПроведениеПрактикиRowChangeEvent(((ПроведениеПрактикиRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ПроведениеПрактикиRowChanging != null)) {
                    this.ПроведениеПрактикиRowChanging(this, new ПроведениеПрактикиRowChangeEvent(((ПроведениеПрактикиRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ПроведениеПрактикиRowDeleted != null)) {
                    this.ПроведениеПрактикиRowDeleted(this, new ПроведениеПрактикиRowChangeEvent(((ПроведениеПрактикиRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ПроведениеПрактикиRowDeleting != null)) {
                    this.ПроведениеПрактикиRowDeleting(this, new ПроведениеПрактикиRowChangeEvent(((ПроведениеПрактикиRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveПроведениеПрактикиRow(ПроведениеПрактикиRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                kursachDataSet ds = new kursachDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ПроведениеПрактикиDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class СпециальностиDataTable : global::System.Data.TypedTableBase<СпециальностиRow> {
            
            private global::System.Data.DataColumn columnIDСпециальности;
            
            private global::System.Data.DataColumn columnНомерСпециальности;
            
            private global::System.Data.DataColumn columnНазваниеСпециальности;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public СпециальностиDataTable() {
                this.TableName = "Специальности";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal СпециальностиDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected СпециальностиDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IDСпециальностиColumn {
                get {
                    return this.columnIDСпециальности;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn НомерСпециальностиColumn {
                get {
                    return this.columnНомерСпециальности;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn НазваниеСпециальностиColumn {
                get {
                    return this.columnНазваниеСпециальности;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public СпециальностиRow this[int index] {
                get {
                    return ((СпециальностиRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event СпециальностиRowChangeEventHandler СпециальностиRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event СпециальностиRowChangeEventHandler СпециальностиRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event СпециальностиRowChangeEventHandler СпециальностиRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event СпециальностиRowChangeEventHandler СпециальностиRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddСпециальностиRow(СпециальностиRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public СпециальностиRow AddСпециальностиRow(string НомерСпециальности, string НазваниеСпециальности) {
                СпециальностиRow rowСпециальностиRow = ((СпециальностиRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        НомерСпециальности,
                        НазваниеСпециальности};
                rowСпециальностиRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowСпециальностиRow);
                return rowСпециальностиRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public СпециальностиRow FindByIDСпециальности(int IDСпециальности) {
                return ((СпециальностиRow)(this.Rows.Find(new object[] {
                            IDСпециальности})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                СпециальностиDataTable cln = ((СпециальностиDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new СпециальностиDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnIDСпециальности = base.Columns["IDСпециальности"];
                this.columnНомерСпециальности = base.Columns["НомерСпециальности"];
                this.columnНазваниеСпециальности = base.Columns["НазваниеСпециальности"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnIDСпециальности = new global::System.Data.DataColumn("IDСпециальности", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDСпециальности);
                this.columnНомерСпециальности = new global::System.Data.DataColumn("НомерСпециальности", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnНомерСпециальности);
                this.columnНазваниеСпециальности = new global::System.Data.DataColumn("НазваниеСпециальности", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnНазваниеСпециальности);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnIDСпециальности}, true));
                this.columnIDСпециальности.AutoIncrement = true;
                this.columnIDСпециальности.AutoIncrementSeed = -1;
                this.columnIDСпециальности.AutoIncrementStep = -1;
                this.columnIDСпециальности.AllowDBNull = false;
                this.columnIDСпециальности.ReadOnly = true;
                this.columnIDСпециальности.Unique = true;
                this.columnНомерСпециальности.AllowDBNull = false;
                this.columnНомерСпециальности.MaxLength = 50;
                this.columnНазваниеСпециальности.AllowDBNull = false;
                this.columnНазваниеСпециальности.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public СпециальностиRow NewСпециальностиRow() {
                return ((СпециальностиRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new СпециальностиRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(СпециальностиRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.СпециальностиRowChanged != null)) {
                    this.СпециальностиRowChanged(this, new СпециальностиRowChangeEvent(((СпециальностиRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.СпециальностиRowChanging != null)) {
                    this.СпециальностиRowChanging(this, new СпециальностиRowChangeEvent(((СпециальностиRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.СпециальностиRowDeleted != null)) {
                    this.СпециальностиRowDeleted(this, new СпециальностиRowChangeEvent(((СпециальностиRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.СпециальностиRowDeleting != null)) {
                    this.СпециальностиRowDeleting(this, new СпециальностиRowChangeEvent(((СпециальностиRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveСпециальностиRow(СпециальностиRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                kursachDataSet ds = new kursachDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "СпециальностиDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class СтудентыDataTable : global::System.Data.TypedTableBase<СтудентыRow> {
            
            private global::System.Data.DataColumn columnIDСтудента;
            
            private global::System.Data.DataColumn columnФИОСтудента;
            
            private global::System.Data.DataColumn columnIDГруппы;
            
            private global::System.Data.DataColumn columnIDСпециальности;
            
            private global::System.Data.DataColumn columnНомерТелефона;
            
            private global::System.Data.DataColumn columnНомерЗачетки;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public СтудентыDataTable() {
                this.TableName = "Студенты";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal СтудентыDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected СтудентыDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IDСтудентаColumn {
                get {
                    return this.columnIDСтудента;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ФИОСтудентаColumn {
                get {
                    return this.columnФИОСтудента;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IDГруппыColumn {
                get {
                    return this.columnIDГруппы;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IDСпециальностиColumn {
                get {
                    return this.columnIDСпециальности;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn НомерТелефонаColumn {
                get {
                    return this.columnНомерТелефона;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn НомерЗачеткиColumn {
                get {
                    return this.columnНомерЗачетки;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public СтудентыRow this[int index] {
                get {
                    return ((СтудентыRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event СтудентыRowChangeEventHandler СтудентыRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event СтудентыRowChangeEventHandler СтудентыRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event СтудентыRowChangeEventHandler СтудентыRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event СтудентыRowChangeEventHandler СтудентыRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddСтудентыRow(СтудентыRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public СтудентыRow AddСтудентыRow(string ФИОСтудента, ГруппыRow parentГруппыRowByFK_Студенты_Группы, СпециальностиRow parentСпециальностиRowByFK_Студенты_Специальности, string НомерТелефона, string НомерЗачетки) {
                СтудентыRow rowСтудентыRow = ((СтудентыRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        ФИОСтудента,
                        null,
                        null,
                        НомерТелефона,
                        НомерЗачетки};
                if ((parentГруппыRowByFK_Студенты_Группы != null)) {
                    columnValuesArray[2] = parentГруппыRowByFK_Студенты_Группы[0];
                }
                if ((parentСпециальностиRowByFK_Студенты_Специальности != null)) {
                    columnValuesArray[3] = parentСпециальностиRowByFK_Студенты_Специальности[0];
                }
                rowСтудентыRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowСтудентыRow);
                return rowСтудентыRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public СтудентыRow FindByIDСтудента(int IDСтудента) {
                return ((СтудентыRow)(this.Rows.Find(new object[] {
                            IDСтудента})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                СтудентыDataTable cln = ((СтудентыDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new СтудентыDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnIDСтудента = base.Columns["IDСтудента"];
                this.columnФИОСтудента = base.Columns["ФИОСтудента"];
                this.columnIDГруппы = base.Columns["IDГруппы"];
                this.columnIDСпециальности = base.Columns["IDСпециальности"];
                this.columnНомерТелефона = base.Columns["НомерТелефона"];
                this.columnНомерЗачетки = base.Columns["НомерЗачетки"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnIDСтудента = new global::System.Data.DataColumn("IDСтудента", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDСтудента);
                this.columnФИОСтудента = new global::System.Data.DataColumn("ФИОСтудента", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnФИОСтудента);
                this.columnIDГруппы = new global::System.Data.DataColumn("IDГруппы", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDГруппы);
                this.columnIDСпециальности = new global::System.Data.DataColumn("IDСпециальности", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDСпециальности);
                this.columnНомерТелефона = new global::System.Data.DataColumn("НомерТелефона", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnНомерТелефона);
                this.columnНомерЗачетки = new global::System.Data.DataColumn("НомерЗачетки", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnНомерЗачетки);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnIDСтудента}, true));
                this.columnIDСтудента.AutoIncrement = true;
                this.columnIDСтудента.AutoIncrementSeed = -1;
                this.columnIDСтудента.AutoIncrementStep = -1;
                this.columnIDСтудента.AllowDBNull = false;
                this.columnIDСтудента.ReadOnly = true;
                this.columnIDСтудента.Unique = true;
                this.columnФИОСтудента.AllowDBNull = false;
                this.columnФИОСтудента.MaxLength = 50;
                this.columnIDГруппы.AllowDBNull = false;
                this.columnIDСпециальности.AllowDBNull = false;
                this.columnНомерТелефона.MaxLength = 50;
                this.columnНомерЗачетки.AllowDBNull = false;
                this.columnНомерЗачетки.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public СтудентыRow NewСтудентыRow() {
                return ((СтудентыRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new СтудентыRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(СтудентыRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.СтудентыRowChanged != null)) {
                    this.СтудентыRowChanged(this, new СтудентыRowChangeEvent(((СтудентыRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.СтудентыRowChanging != null)) {
                    this.СтудентыRowChanging(this, new СтудентыRowChangeEvent(((СтудентыRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.СтудентыRowDeleted != null)) {
                    this.СтудентыRowDeleted(this, new СтудентыRowChangeEvent(((СтудентыRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.СтудентыRowDeleting != null)) {
                    this.СтудентыRowDeleting(this, new СтудентыRowChangeEvent(((СтудентыRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveСтудентыRow(СтудентыRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                kursachDataSet ds = new kursachDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "СтудентыDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Текущая_практикаDataTable : global::System.Data.TypedTableBase<Текущая_практикаRow> {
            
            private global::System.Data.DataColumn columnIDТекущейПрактики;
            
            private global::System.Data.DataColumn columnIDДоговора;
            
            private global::System.Data.DataColumn columnIDВидаПрактики;
            
            private global::System.Data.DataColumn columnIDПреподавателя;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Текущая_практикаDataTable() {
                this.TableName = "Текущая практика";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal Текущая_практикаDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected Текущая_практикаDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IDТекущейПрактикиColumn {
                get {
                    return this.columnIDТекущейПрактики;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IDДоговораColumn {
                get {
                    return this.columnIDДоговора;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IDВидаПрактикиColumn {
                get {
                    return this.columnIDВидаПрактики;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IDПреподавателяColumn {
                get {
                    return this.columnIDПреподавателя;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Текущая_практикаRow this[int index] {
                get {
                    return ((Текущая_практикаRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event Текущая_практикаRowChangeEventHandler Текущая_практикаRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event Текущая_практикаRowChangeEventHandler Текущая_практикаRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event Текущая_практикаRowChangeEventHandler Текущая_практикаRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event Текущая_практикаRowChangeEventHandler Текущая_практикаRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddТекущая_практикаRow(Текущая_практикаRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Текущая_практикаRow AddТекущая_практикаRow(ДоговорыRow parentДоговорыRowByFK_Текущая_практика_Договоры, Виды_практикиRow parentВиды_практикиRowByFK_Текущая_практика_Виды_практики, ПреподавателиRow parentПреподавателиRowByFK_Текущая_практика_Преподаватели) {
                Текущая_практикаRow rowТекущая_практикаRow = ((Текущая_практикаRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        null,
                        null};
                if ((parentДоговорыRowByFK_Текущая_практика_Договоры != null)) {
                    columnValuesArray[1] = parentДоговорыRowByFK_Текущая_практика_Договоры[0];
                }
                if ((parentВиды_практикиRowByFK_Текущая_практика_Виды_практики != null)) {
                    columnValuesArray[2] = parentВиды_практикиRowByFK_Текущая_практика_Виды_практики[0];
                }
                if ((parentПреподавателиRowByFK_Текущая_практика_Преподаватели != null)) {
                    columnValuesArray[3] = parentПреподавателиRowByFK_Текущая_практика_Преподаватели[0];
                }
                rowТекущая_практикаRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowТекущая_практикаRow);
                return rowТекущая_практикаRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Текущая_практикаRow FindByIDТекущейПрактики(int IDТекущейПрактики) {
                return ((Текущая_практикаRow)(this.Rows.Find(new object[] {
                            IDТекущейПрактики})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                Текущая_практикаDataTable cln = ((Текущая_практикаDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Текущая_практикаDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnIDТекущейПрактики = base.Columns["IDТекущейПрактики"];
                this.columnIDДоговора = base.Columns["IDДоговора"];
                this.columnIDВидаПрактики = base.Columns["IDВидаПрактики"];
                this.columnIDПреподавателя = base.Columns["IDПреподавателя"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnIDТекущейПрактики = new global::System.Data.DataColumn("IDТекущейПрактики", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDТекущейПрактики);
                this.columnIDДоговора = new global::System.Data.DataColumn("IDДоговора", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDДоговора);
                this.columnIDВидаПрактики = new global::System.Data.DataColumn("IDВидаПрактики", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDВидаПрактики);
                this.columnIDПреподавателя = new global::System.Data.DataColumn("IDПреподавателя", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDПреподавателя);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnIDТекущейПрактики}, true));
                this.columnIDТекущейПрактики.AutoIncrement = true;
                this.columnIDТекущейПрактики.AutoIncrementSeed = -1;
                this.columnIDТекущейПрактики.AutoIncrementStep = -1;
                this.columnIDТекущейПрактики.AllowDBNull = false;
                this.columnIDТекущейПрактики.ReadOnly = true;
                this.columnIDТекущейПрактики.Unique = true;
                this.columnIDДоговора.AllowDBNull = false;
                this.columnIDВидаПрактики.AllowDBNull = false;
                this.columnIDПреподавателя.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Текущая_практикаRow NewТекущая_практикаRow() {
                return ((Текущая_практикаRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Текущая_практикаRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(Текущая_практикаRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Текущая_практикаRowChanged != null)) {
                    this.Текущая_практикаRowChanged(this, new Текущая_практикаRowChangeEvent(((Текущая_практикаRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Текущая_практикаRowChanging != null)) {
                    this.Текущая_практикаRowChanging(this, new Текущая_практикаRowChangeEvent(((Текущая_практикаRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Текущая_практикаRowDeleted != null)) {
                    this.Текущая_практикаRowDeleted(this, new Текущая_практикаRowChangeEvent(((Текущая_практикаRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Текущая_практикаRowDeleting != null)) {
                    this.Текущая_практикаRowDeleting(this, new Текущая_практикаRowChangeEvent(((Текущая_практикаRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveТекущая_практикаRow(Текущая_практикаRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                kursachDataSet ds = new kursachDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Текущая_практикаDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class Виды_практикиRow : global::System.Data.DataRow {
            
            private Виды_практикиDataTable tableВиды_практики;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal Виды_практикиRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableВиды_практики = ((Виды_практикиDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int IDпрактики {
                get {
                    return ((int)(this[this.tableВиды_практики.IDпрактикиColumn]));
                }
                set {
                    this[this.tableВиды_практики.IDпрактикиColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Наименование {
                get {
                    return ((string)(this[this.tableВиды_практики.НаименованиеColumn]));
                }
                set {
                    this[this.tableВиды_практики.НаименованиеColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int IDПроведения {
                get {
                    return ((int)(this[this.tableВиды_практики.IDПроведенияColumn]));
                }
                set {
                    this[this.tableВиды_практики.IDПроведенияColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ПроведениеПрактикиRow ПроведениеПрактикиRow {
                get {
                    return ((ПроведениеПрактикиRow)(this.GetParentRow(this.Table.ParentRelations["FK_Виды практики_ПроведениеПрактики"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Виды практики_ПроведениеПрактики"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Текущая_практикаRow[] GetТекущая_практикаRows() {
                if ((this.Table.ChildRelations["FK_Текущая практика_Виды практики"] == null)) {
                    return new Текущая_практикаRow[0];
                }
                else {
                    return ((Текущая_практикаRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Текущая практика_Виды практики"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class ГруппыRow : global::System.Data.DataRow {
            
            private ГруппыDataTable tableГруппы;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal ГруппыRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableГруппы = ((ГруппыDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int IDГруппы {
                get {
                    return ((int)(this[this.tableГруппы.IDГруппыColumn]));
                }
                set {
                    this[this.tableГруппы.IDГруппыColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string НомерГруппы {
                get {
                    return ((string)(this[this.tableГруппы.НомерГруппыColumn]));
                }
                set {
                    this[this.tableГруппы.НомерГруппыColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ФИОКуратора {
                get {
                    try {
                        return ((string)(this[this.tableГруппы.ФИОКуратораColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'ФИОКуратора\' в таблице \'Группы\' равно DBNull.", e);
                    }
                }
                set {
                    this[this.tableГруппы.ФИОКуратораColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ФИОСтаросты {
                get {
                    try {
                        return ((string)(this[this.tableГруппы.ФИОСтаростыColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'ФИОСтаросты\' в таблице \'Группы\' равно DBNull.", e);
                    }
                }
                set {
                    this[this.tableГруппы.ФИОСтаростыColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsФИОКуратораNull() {
                return this.IsNull(this.tableГруппы.ФИОКуратораColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetФИОКуратораNull() {
                this[this.tableГруппы.ФИОКуратораColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsФИОСтаростыNull() {
                return this.IsNull(this.tableГруппы.ФИОСтаростыColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetФИОСтаростыNull() {
                this[this.tableГруппы.ФИОСтаростыColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public СтудентыRow[] GetСтудентыRows() {
                if ((this.Table.ChildRelations["FK_Студенты_Группы"] == null)) {
                    return new СтудентыRow[0];
                }
                else {
                    return ((СтудентыRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Студенты_Группы"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class ДоговорыRow : global::System.Data.DataRow {
            
            private ДоговорыDataTable tableДоговоры;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal ДоговорыRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableДоговоры = ((ДоговорыDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int IDДоговора {
                get {
                    return ((int)(this[this.tableДоговоры.IDДоговораColumn]));
                }
                set {
                    this[this.tableДоговоры.IDДоговораColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string НомерДоговора {
                get {
                    return ((string)(this[this.tableДоговоры.НомерДоговораColumn]));
                }
                set {
                    this[this.tableДоговоры.НомерДоговораColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ДатаЗаключения {
                get {
                    return ((string)(this[this.tableДоговоры.ДатаЗаключенияColumn]));
                }
                set {
                    this[this.tableДоговоры.ДатаЗаключенияColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ФИОИсполнителя {
                get {
                    return ((string)(this[this.tableДоговоры.ФИОИсполнителяColumn]));
                }
                set {
                    this[this.tableДоговоры.ФИОИсполнителяColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ДолжностьИсполнителя {
                get {
                    return ((string)(this[this.tableДоговоры.ДолжностьИсполнителяColumn]));
                }
                set {
                    this[this.tableДоговоры.ДолжностьИсполнителяColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string НазваниеПредприятия {
                get {
                    return ((string)(this[this.tableДоговоры.НазваниеПредприятияColumn]));
                }
                set {
                    this[this.tableДоговоры.НазваниеПредприятияColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string УченаяСтепень {
                get {
                    try {
                        return ((string)(this[this.tableДоговоры.УченаяСтепеньColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'УченаяСтепень\' в таблице \'Договоры\' равно DBNull.", e);
                    }
                }
                set {
                    this[this.tableДоговоры.УченаяСтепеньColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Звание {
                get {
                    try {
                        return ((string)(this[this.tableДоговоры.ЗваниеColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'Звание\' в таблице \'Договоры\' равно DBNull.", e);
                    }
                }
                set {
                    this[this.tableДоговоры.ЗваниеColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string СерияПаспорта {
                get {
                    return ((string)(this[this.tableДоговоры.СерияПаспортаColumn]));
                }
                set {
                    this[this.tableДоговоры.СерияПаспортаColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string НомерПаспорта {
                get {
                    return ((string)(this[this.tableДоговоры.НомерПаспортаColumn]));
                }
                set {
                    this[this.tableДоговоры.НомерПаспортаColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ДатаВыдачи {
                get {
                    return ((string)(this[this.tableДоговоры.ДатаВыдачиColumn]));
                }
                set {
                    this[this.tableДоговоры.ДатаВыдачиColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ОрганВыдачи {
                get {
                    return ((string)(this[this.tableДоговоры.ОрганВыдачиColumn]));
                }
                set {
                    this[this.tableДоговоры.ОрганВыдачиColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ИдентификационныйНомер {
                get {
                    return ((string)(this[this.tableДоговоры.ИдентификационныйНомерColumn]));
                }
                set {
                    this[this.tableДоговоры.ИдентификационныйНомерColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string НомерСтраховогоСвидетельства {
                get {
                    try {
                        return ((string)(this[this.tableДоговоры.НомерСтраховогоСвидетельстваColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'НомерСтраховогоСвидетельства\' в таблице \'Договоры\' равно DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableДоговоры.НомерСтраховогоСвидетельстваColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ДомашнийАдрес {
                get {
                    return ((string)(this[this.tableДоговоры.ДомашнийАдресColumn]));
                }
                set {
                    this[this.tableДоговоры.ДомашнийАдресColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ТелРабочий {
                get {
                    return ((string)(this[this.tableДоговоры.ТелРабочийColumn]));
                }
                set {
                    this[this.tableДоговоры.ТелРабочийColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ТелДомашний {
                get {
                    try {
                        return ((string)(this[this.tableДоговоры.ТелДомашнийColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'ТелДомашний\' в таблице \'Договоры\' равно DBNull.", e);
                    }
                }
                set {
                    this[this.tableДоговоры.ТелДомашнийColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string МестоОсновнойРаботы {
                get {
                    try {
                        return ((string)(this[this.tableДоговоры.МестоОсновнойРаботыColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'МестоОсновнойРаботы\' в таблице \'Договоры\' равно DBNull.", e);
                    }
                }
                set {
                    this[this.tableДоговоры.МестоОсновнойРаботыColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int IDСтудента {
                get {
                    return ((int)(this[this.tableДоговоры.IDСтудентаColumn]));
                }
                set {
                    this[this.tableДоговоры.IDСтудентаColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ДатаПроведения {
                get {
                    return ((string)(this[this.tableДоговоры.ДатаПроведенияColumn]));
                }
                set {
                    this[this.tableДоговоры.ДатаПроведенияColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string КоличествоЧасов {
                get {
                    return ((string)(this[this.tableДоговоры.КоличествоЧасовColumn]));
                }
                set {
                    this[this.tableДоговоры.КоличествоЧасовColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string СтоимостьОдногоЧаса {
                get {
                    return ((string)(this[this.tableДоговоры.СтоимостьОдногоЧасаColumn]));
                }
                set {
                    this[this.tableДоговоры.СтоимостьОдногоЧасаColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ОбщаяСумма {
                get {
                    return ((string)(this[this.tableДоговоры.ОбщаяСуммаColumn]));
                }
                set {
                    this[this.tableДоговоры.ОбщаяСуммаColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string НомерПриказа {
                get {
                    return ((string)(this[this.tableДоговоры.НомерПриказаColumn]));
                }
                set {
                    this[this.tableДоговоры.НомерПриказаColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ДатаПриказа {
                get {
                    return ((string)(this[this.tableДоговоры.ДатаПриказаColumn]));
                }
                set {
                    this[this.tableДоговоры.ДатаПриказаColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ФИООтделаКадров {
                get {
                    try {
                        return ((string)(this[this.tableДоговоры.ФИООтделаКадровColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'ФИООтделаКадров\' в таблице \'Договоры\' равно DBNull.", e);
                    }
                }
                set {
                    this[this.tableДоговоры.ФИООтделаКадровColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ФИОЗавКафедрой {
                get {
                    return ((string)(this[this.tableДоговоры.ФИОЗавКафедройColumn]));
                }
                set {
                    this[this.tableДоговоры.ФИОЗавКафедройColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string НазваниеКафедры {
                get {
                    return ((string)(this[this.tableДоговоры.НазваниеКафедрыColumn]));
                }
                set {
                    this[this.tableДоговоры.НазваниеКафедрыColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string РуководительПрактики {
                get {
                    return ((string)(this[this.tableДоговоры.РуководительПрактикиColumn]));
                }
                set {
                    this[this.tableДоговоры.РуководительПрактикиColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public СтудентыRow СтудентыRow {
                get {
                    return ((СтудентыRow)(this.GetParentRow(this.Table.ParentRelations["FK_Договоры_Студенты"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Договоры_Студенты"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsУченаяСтепеньNull() {
                return this.IsNull(this.tableДоговоры.УченаяСтепеньColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetУченаяСтепеньNull() {
                this[this.tableДоговоры.УченаяСтепеньColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsЗваниеNull() {
                return this.IsNull(this.tableДоговоры.ЗваниеColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetЗваниеNull() {
                this[this.tableДоговоры.ЗваниеColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsНомерСтраховогоСвидетельстваNull() {
                return this.IsNull(this.tableДоговоры.НомерСтраховогоСвидетельстваColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetНомерСтраховогоСвидетельстваNull() {
                this[this.tableДоговоры.НомерСтраховогоСвидетельстваColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsТелДомашнийNull() {
                return this.IsNull(this.tableДоговоры.ТелДомашнийColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetТелДомашнийNull() {
                this[this.tableДоговоры.ТелДомашнийColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsМестоОсновнойРаботыNull() {
                return this.IsNull(this.tableДоговоры.МестоОсновнойРаботыColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetМестоОсновнойРаботыNull() {
                this[this.tableДоговоры.МестоОсновнойРаботыColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsФИООтделаКадровNull() {
                return this.IsNull(this.tableДоговоры.ФИООтделаКадровColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetФИООтделаКадровNull() {
                this[this.tableДоговоры.ФИООтделаКадровColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ПредприятияRow[] GetПредприятияRows() {
                if ((this.Table.ChildRelations["FK_Предприятия_Договоры"] == null)) {
                    return new ПредприятияRow[0];
                }
                else {
                    return ((ПредприятияRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Предприятия_Договоры"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Текущая_практикаRow[] GetТекущая_практикаRows() {
                if ((this.Table.ChildRelations["FK_Текущая практика_Договоры"] == null)) {
                    return new Текущая_практикаRow[0];
                }
                else {
                    return ((Текущая_практикаRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Текущая практика_Договоры"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class ПланНабораRow : global::System.Data.DataRow {
            
            private ПланНабораDataTable tableПланНабора;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal ПланНабораRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableПланНабора = ((ПланНабораDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int IDНабораНаГод {
                get {
                    return ((int)(this[this.tableПланНабора.IDНабораНаГодColumn]));
                }
                set {
                    this[this.tableПланНабора.IDНабораНаГодColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Год {
                get {
                    return ((string)(this[this.tableПланНабора.ГодColumn]));
                }
                set {
                    this[this.tableПланНабора.ГодColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string МаксКолвоСтудентов {
                get {
                    return ((string)(this[this.tableПланНабора.МаксКолвоСтудентовColumn]));
                }
                set {
                    this[this.tableПланНабора.МаксКолвоСтудентовColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ПредприятияRow[] GetПредприятияRows() {
                if ((this.Table.ChildRelations["FK_Предприятия_ПланНабора"] == null)) {
                    return new ПредприятияRow[0];
                }
                else {
                    return ((ПредприятияRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Предприятия_ПланНабора"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class ПредприятияRow : global::System.Data.DataRow {
            
            private ПредприятияDataTable tableПредприятия;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal ПредприятияRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableПредприятия = ((ПредприятияDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int ID_предприятия {
                get {
                    return ((int)(this[this.tableПредприятия.ID_предприятияColumn]));
                }
                set {
                    this[this.tableПредприятия.ID_предприятияColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Название {
                get {
                    return ((string)(this[this.tableПредприятия.НазваниеColumn]));
                }
                set {
                    this[this.tableПредприятия.НазваниеColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string УНП {
                get {
                    return ((string)(this[this.tableПредприятия.УНПColumn]));
                }
                set {
                    this[this.tableПредприятия.УНПColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Адрес {
                get {
                    return ((string)(this[this.tableПредприятия.АдресColumn]));
                }
                set {
                    this[this.tableПредприятия.АдресColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Телефон {
                get {
                    return ((string)(this[this.tableПредприятия.ТелефонColumn]));
                }
                set {
                    this[this.tableПредприятия.ТелефонColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Эл__почта {
                get {
                    try {
                        return ((string)(this[this.tableПредприятия.Эл__почтаColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'Эл_ почта\' в таблице \'Предприятия\' равно DBNull.", e);
                    }
                }
                set {
                    this[this.tableПредприятия.Эл__почтаColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Контактное_лицо {
                get {
                    return ((string)(this[this.tableПредприятия.Контактное_лицоColumn]));
                }
                set {
                    this[this.tableПредприятия.Контактное_лицоColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int IDЗаключенныхДоговоров {
                get {
                    return ((int)(this[this.tableПредприятия.IDЗаключенныхДоговоровColumn]));
                }
                set {
                    this[this.tableПредприятия.IDЗаключенныхДоговоровColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int IDНабораНаГод {
                get {
                    return ((int)(this[this.tableПредприятия.IDНабораНаГодColumn]));
                }
                set {
                    this[this.tableПредприятия.IDНабораНаГодColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ДоговорыRow ДоговорыRow {
                get {
                    return ((ДоговорыRow)(this.GetParentRow(this.Table.ParentRelations["FK_Предприятия_Договоры"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Предприятия_Договоры"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ПланНабораRow ПланНабораRow {
                get {
                    return ((ПланНабораRow)(this.GetParentRow(this.Table.ParentRelations["FK_Предприятия_ПланНабора"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Предприятия_ПланНабора"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsЭл__почтаNull() {
                return this.IsNull(this.tableПредприятия.Эл__почтаColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetЭл__почтаNull() {
                this[this.tableПредприятия.Эл__почтаColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class ПреподавателиRow : global::System.Data.DataRow {
            
            private ПреподавателиDataTable tableПреподаватели;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal ПреподавателиRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableПреподаватели = ((ПреподавателиDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int IDПреподавателя {
                get {
                    return ((int)(this[this.tableПреподаватели.IDПреподавателяColumn]));
                }
                set {
                    this[this.tableПреподаватели.IDПреподавателяColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ФИОПреподавателя {
                get {
                    return ((string)(this[this.tableПреподаватели.ФИОПреподавателяColumn]));
                }
                set {
                    this[this.tableПреподаватели.ФИОПреподавателяColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Должность {
                get {
                    try {
                        return ((string)(this[this.tableПреподаватели.ДолжностьColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'Должность\' в таблице \'Преподаватели\' равно DBNull.", e);
                    }
                }
                set {
                    this[this.tableПреподаватели.ДолжностьColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Кафедра {
                get {
                    try {
                        return ((string)(this[this.tableПреподаватели.КафедраColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'Кафедра\' в таблице \'Преподаватели\' равно DBNull.", e);
                    }
                }
                set {
                    this[this.tableПреподаватели.КафедраColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsДолжностьNull() {
                return this.IsNull(this.tableПреподаватели.ДолжностьColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetДолжностьNull() {
                this[this.tableПреподаватели.ДолжностьColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsКафедраNull() {
                return this.IsNull(this.tableПреподаватели.КафедраColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetКафедраNull() {
                this[this.tableПреподаватели.КафедраColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Текущая_практикаRow[] GetТекущая_практикаRows() {
                if ((this.Table.ChildRelations["FK_Текущая практика_Преподаватели"] == null)) {
                    return new Текущая_практикаRow[0];
                }
                else {
                    return ((Текущая_практикаRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Текущая практика_Преподаватели"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class ПроведениеПрактикиRow : global::System.Data.DataRow {
            
            private ПроведениеПрактикиDataTable tableПроведениеПрактики;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal ПроведениеПрактикиRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableПроведениеПрактики = ((ПроведениеПрактикиDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int IDПроведения {
                get {
                    return ((int)(this[this.tableПроведениеПрактики.IDПроведенияColumn]));
                }
                set {
                    this[this.tableПроведениеПрактики.IDПроведенияColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Год {
                get {
                    return ((string)(this[this.tableПроведениеПрактики.ГодColumn]));
                }
                set {
                    this[this.tableПроведениеПрактики.ГодColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Производственная {
                get {
                    return ((string)(this[this.tableПроведениеПрактики.ПроизводственнаяColumn]));
                }
                set {
                    this[this.tableПроведениеПрактики.ПроизводственнаяColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Преддипломная {
                get {
                    return ((string)(this[this.tableПроведениеПрактики.ПреддипломнаяColumn]));
                }
                set {
                    this[this.tableПроведениеПрактики.ПреддипломнаяColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Виды_практикиRow[] GetВиды_практикиRows() {
                if ((this.Table.ChildRelations["FK_Виды практики_ПроведениеПрактики"] == null)) {
                    return new Виды_практикиRow[0];
                }
                else {
                    return ((Виды_практикиRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Виды практики_ПроведениеПрактики"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class СпециальностиRow : global::System.Data.DataRow {
            
            private СпециальностиDataTable tableСпециальности;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal СпециальностиRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableСпециальности = ((СпециальностиDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int IDСпециальности {
                get {
                    return ((int)(this[this.tableСпециальности.IDСпециальностиColumn]));
                }
                set {
                    this[this.tableСпециальности.IDСпециальностиColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string НомерСпециальности {
                get {
                    return ((string)(this[this.tableСпециальности.НомерСпециальностиColumn]));
                }
                set {
                    this[this.tableСпециальности.НомерСпециальностиColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string НазваниеСпециальности {
                get {
                    return ((string)(this[this.tableСпециальности.НазваниеСпециальностиColumn]));
                }
                set {
                    this[this.tableСпециальности.НазваниеСпециальностиColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public СтудентыRow[] GetСтудентыRows() {
                if ((this.Table.ChildRelations["FK_Студенты_Специальности"] == null)) {
                    return new СтудентыRow[0];
                }
                else {
                    return ((СтудентыRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Студенты_Специальности"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class СтудентыRow : global::System.Data.DataRow {
            
            private СтудентыDataTable tableСтуденты;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal СтудентыRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableСтуденты = ((СтудентыDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int IDСтудента {
                get {
                    return ((int)(this[this.tableСтуденты.IDСтудентаColumn]));
                }
                set {
                    this[this.tableСтуденты.IDСтудентаColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ФИОСтудента {
                get {
                    return ((string)(this[this.tableСтуденты.ФИОСтудентаColumn]));
                }
                set {
                    this[this.tableСтуденты.ФИОСтудентаColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int IDГруппы {
                get {
                    return ((int)(this[this.tableСтуденты.IDГруппыColumn]));
                }
                set {
                    this[this.tableСтуденты.IDГруппыColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int IDСпециальности {
                get {
                    return ((int)(this[this.tableСтуденты.IDСпециальностиColumn]));
                }
                set {
                    this[this.tableСтуденты.IDСпециальностиColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string НомерТелефона {
                get {
                    try {
                        return ((string)(this[this.tableСтуденты.НомерТелефонаColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'НомерТелефона\' в таблице \'Студенты\' равно DBNull.", e);
                    }
                }
                set {
                    this[this.tableСтуденты.НомерТелефонаColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string НомерЗачетки {
                get {
                    return ((string)(this[this.tableСтуденты.НомерЗачеткиColumn]));
                }
                set {
                    this[this.tableСтуденты.НомерЗачеткиColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ГруппыRow ГруппыRow {
                get {
                    return ((ГруппыRow)(this.GetParentRow(this.Table.ParentRelations["FK_Студенты_Группы"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Студенты_Группы"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public СпециальностиRow СпециальностиRow {
                get {
                    return ((СпециальностиRow)(this.GetParentRow(this.Table.ParentRelations["FK_Студенты_Специальности"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Студенты_Специальности"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsНомерТелефонаNull() {
                return this.IsNull(this.tableСтуденты.НомерТелефонаColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetНомерТелефонаNull() {
                this[this.tableСтуденты.НомерТелефонаColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ДоговорыRow[] GetДоговорыRows() {
                if ((this.Table.ChildRelations["FK_Договоры_Студенты"] == null)) {
                    return new ДоговорыRow[0];
                }
                else {
                    return ((ДоговорыRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Договоры_Студенты"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class Текущая_практикаRow : global::System.Data.DataRow {
            
            private Текущая_практикаDataTable tableТекущая_практика;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal Текущая_практикаRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableТекущая_практика = ((Текущая_практикаDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int IDТекущейПрактики {
                get {
                    return ((int)(this[this.tableТекущая_практика.IDТекущейПрактикиColumn]));
                }
                set {
                    this[this.tableТекущая_практика.IDТекущейПрактикиColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int IDДоговора {
                get {
                    return ((int)(this[this.tableТекущая_практика.IDДоговораColumn]));
                }
                set {
                    this[this.tableТекущая_практика.IDДоговораColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int IDВидаПрактики {
                get {
                    return ((int)(this[this.tableТекущая_практика.IDВидаПрактикиColumn]));
                }
                set {
                    this[this.tableТекущая_практика.IDВидаПрактикиColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int IDПреподавателя {
                get {
                    return ((int)(this[this.tableТекущая_практика.IDПреподавателяColumn]));
                }
                set {
                    this[this.tableТекущая_практика.IDПреподавателяColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Виды_практикиRow Виды_практикиRow {
                get {
                    return ((Виды_практикиRow)(this.GetParentRow(this.Table.ParentRelations["FK_Текущая практика_Виды практики"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Текущая практика_Виды практики"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ДоговорыRow ДоговорыRow {
                get {
                    return ((ДоговорыRow)(this.GetParentRow(this.Table.ParentRelations["FK_Текущая практика_Договоры"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Текущая практика_Договоры"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ПреподавателиRow ПреподавателиRow {
                get {
                    return ((ПреподавателиRow)(this.GetParentRow(this.Table.ParentRelations["FK_Текущая практика_Преподаватели"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Текущая практика_Преподаватели"]);
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class Виды_практикиRowChangeEvent : global::System.EventArgs {
            
            private Виды_практикиRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Виды_практикиRowChangeEvent(Виды_практикиRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Виды_практикиRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class ГруппыRowChangeEvent : global::System.EventArgs {
            
            private ГруппыRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ГруппыRowChangeEvent(ГруппыRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ГруппыRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class ДоговорыRowChangeEvent : global::System.EventArgs {
            
            private ДоговорыRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ДоговорыRowChangeEvent(ДоговорыRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ДоговорыRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class ПланНабораRowChangeEvent : global::System.EventArgs {
            
            private ПланНабораRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ПланНабораRowChangeEvent(ПланНабораRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ПланНабораRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class ПредприятияRowChangeEvent : global::System.EventArgs {
            
            private ПредприятияRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ПредприятияRowChangeEvent(ПредприятияRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ПредприятияRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class ПреподавателиRowChangeEvent : global::System.EventArgs {
            
            private ПреподавателиRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ПреподавателиRowChangeEvent(ПреподавателиRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ПреподавателиRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class ПроведениеПрактикиRowChangeEvent : global::System.EventArgs {
            
            private ПроведениеПрактикиRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ПроведениеПрактикиRowChangeEvent(ПроведениеПрактикиRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ПроведениеПрактикиRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class СпециальностиRowChangeEvent : global::System.EventArgs {
            
            private СпециальностиRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public СпециальностиRowChangeEvent(СпециальностиRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public СпециальностиRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class СтудентыRowChangeEvent : global::System.EventArgs {
            
            private СтудентыRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public СтудентыRowChangeEvent(СтудентыRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public СтудентыRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class Текущая_практикаRowChangeEvent : global::System.EventArgs {
            
            private Текущая_практикаRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Текущая_практикаRowChangeEvent(Текущая_практикаRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Текущая_практикаRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace kursachMain.kursachDataSetTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Виды_практикиTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public Виды_практикиTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Виды практики";
            tableMapping.ColumnMappings.Add("IDпрактики", "IDпрактики");
            tableMapping.ColumnMappings.Add("Наименование", "Наименование");
            tableMapping.ColumnMappings.Add("IDПроведения", "IDПроведения");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Виды практики] WHERE (([IDпрактики] = @Original_IDпрактики) AN" +
                "D ([Наименование] = @Original_Наименование) AND ([IDПроведения] = @Original_IDПр" +
                "оведения))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IDпрактики", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDпрактики", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Наименование", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Наименование", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IDПроведения", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDПроведения", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Виды практики] ([IDпрактики], [Наименование]) VALUES (@IDпракт" +
                "ики, @Наименование);\r\nSELECT IDпрактики, Наименование, IDПроведения FROM [Виды п" +
                "рактики] WHERE (IDпрактики = @IDпрактики)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDпрактики", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDпрактики", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Наименование", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Наименование", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Виды практики] SET [IDпрактики] = @IDпрактики, [Наименование] = @Наименование WHERE (([IDпрактики] = @Original_IDпрактики) AND ([Наименование] = @Original_Наименование) AND ([IDПроведения] = @Original_IDПроведения));
SELECT IDпрактики, Наименование, IDПроведения FROM [Виды практики] WHERE (IDпрактики = @IDпрактики)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDпрактики", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDпрактики", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Наименование", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Наименование", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IDпрактики", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDпрактики", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Наименование", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Наименование", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IDПроведения", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDПроведения", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::kursachMain.Properties.Settings.Default.kursachConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT IDпрактики, Наименование, IDПроведения FROM dbo.[Виды практики]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(kursachDataSet.Виды_практикиDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual kursachDataSet.Виды_практикиDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            kursachDataSet.Виды_практикиDataTable dataTable = new kursachDataSet.Виды_практикиDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(kursachDataSet.Виды_практикиDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(kursachDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Виды практики");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_IDпрактики, string Original_Наименование, int Original_IDПроведения) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_IDпрактики));
            if ((Original_Наименование == null)) {
                throw new global::System.ArgumentNullException("Original_Наименование");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_Наименование));
            }
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_IDПроведения));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int IDпрактики, string Наименование) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(IDпрактики));
            if ((Наименование == null)) {
                throw new global::System.ArgumentNullException("Наименование");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Наименование));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int IDпрактики, string Наименование, int Original_IDпрактики, string Original_Наименование, int Original_IDПроведения) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(IDпрактики));
            if ((Наименование == null)) {
                throw new global::System.ArgumentNullException("Наименование");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Наименование));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_IDпрактики));
            if ((Original_Наименование == null)) {
                throw new global::System.ArgumentNullException("Original_Наименование");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_Наименование));
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_IDПроведения));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Наименование, int Original_IDпрактики, string Original_Наименование, int Original_IDПроведения) {
            return this.Update(Original_IDпрактики, Наименование, Original_IDпрактики, Original_Наименование, Original_IDПроведения);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ГруппыTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public ГруппыTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Группы";
            tableMapping.ColumnMappings.Add("IDГруппы", "IDГруппы");
            tableMapping.ColumnMappings.Add("НомерГруппы", "НомерГруппы");
            tableMapping.ColumnMappings.Add("ФИОКуратора", "ФИОКуратора");
            tableMapping.ColumnMappings.Add("ФИОСтаросты", "ФИОСтаросты");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[Группы] WHERE (([IDГруппы] = @Original_IDГруппы) AND ([НомерГруппы] = @Original_НомерГруппы) AND ((@IsNull_ФИОКуратора = 1 AND [ФИОКуратора] IS NULL) OR ([ФИОКуратора] = @Original_ФИОКуратора)) AND ((@IsNull_ФИОСтаросты = 1 AND [ФИОСтаросты] IS NULL) OR ([ФИОСтаросты] = @Original_ФИОСтаросты)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IDГруппы", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDГруппы", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_НомерГруппы", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НомерГруппы", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ФИОКуратора", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ФИОКуратора", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ФИОКуратора", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ФИОКуратора", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ФИОСтаросты", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ФИОСтаросты", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ФИОСтаросты", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ФИОСтаросты", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Группы] ([НомерГруппы], [ФИОКуратора], [ФИОСтаросты]) VALUES (" +
                "@НомерГруппы, @ФИОКуратора, @ФИОСтаросты);\r\nSELECT IDГруппы, НомерГруппы, ФИОКур" +
                "атора, ФИОСтаросты FROM Группы WHERE (IDГруппы = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@НомерГруппы", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НомерГруппы", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ФИОКуратора", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ФИОКуратора", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ФИОСтаросты", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ФИОСтаросты", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Группы] SET [НомерГруппы] = @НомерГруппы, [ФИОКуратора] = @ФИОКуратора, [ФИОСтаросты] = @ФИОСтаросты WHERE (([IDГруппы] = @Original_IDГруппы) AND ([НомерГруппы] = @Original_НомерГруппы) AND ((@IsNull_ФИОКуратора = 1 AND [ФИОКуратора] IS NULL) OR ([ФИОКуратора] = @Original_ФИОКуратора)) AND ((@IsNull_ФИОСтаросты = 1 AND [ФИОСтаросты] IS NULL) OR ([ФИОСтаросты] = @Original_ФИОСтаросты)));
SELECT IDГруппы, НомерГруппы, ФИОКуратора, ФИОСтаросты FROM Группы WHERE (IDГруппы = @IDГруппы)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@НомерГруппы", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НомерГруппы", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ФИОКуратора", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ФИОКуратора", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ФИОСтаросты", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ФИОСтаросты", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IDГруппы", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDГруппы", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_НомерГруппы", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НомерГруппы", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ФИОКуратора", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ФИОКуратора", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ФИОКуратора", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ФИОКуратора", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ФИОСтаросты", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ФИОСтаросты", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ФИОСтаросты", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ФИОСтаросты", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDГруппы", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "IDГруппы", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::kursachMain.Properties.Settings.Default.kursachConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT IDГруппы, НомерГруппы, ФИОКуратора, ФИОСтаросты FROM dbo.Группы";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(kursachDataSet.ГруппыDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual kursachDataSet.ГруппыDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            kursachDataSet.ГруппыDataTable dataTable = new kursachDataSet.ГруппыDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(kursachDataSet.ГруппыDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(kursachDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Группы");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_IDГруппы, string Original_НомерГруппы, string Original_ФИОКуратора, string Original_ФИОСтаросты) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_IDГруппы));
            if ((Original_НомерГруппы == null)) {
                throw new global::System.ArgumentNullException("Original_НомерГруппы");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_НомерГруппы));
            }
            if ((Original_ФИОКуратора == null)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_ФИОКуратора));
            }
            if ((Original_ФИОСтаросты == null)) {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_ФИОСтаросты));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string НомерГруппы, string ФИОКуратора, string ФИОСтаросты) {
            if ((НомерГруппы == null)) {
                throw new global::System.ArgumentNullException("НомерГруппы");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(НомерГруппы));
            }
            if ((ФИОКуратора == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(ФИОКуратора));
            }
            if ((ФИОСтаросты == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(ФИОСтаросты));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string НомерГруппы, string ФИОКуратора, string ФИОСтаросты, int Original_IDГруппы, string Original_НомерГруппы, string Original_ФИОКуратора, string Original_ФИОСтаросты, int IDГруппы) {
            if ((НомерГруппы == null)) {
                throw new global::System.ArgumentNullException("НомерГруппы");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(НомерГруппы));
            }
            if ((ФИОКуратора == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(ФИОКуратора));
            }
            if ((ФИОСтаросты == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(ФИОСтаросты));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Original_IDГруппы));
            if ((Original_НомерГруппы == null)) {
                throw new global::System.ArgumentNullException("Original_НомерГруппы");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Original_НомерГруппы));
            }
            if ((Original_ФИОКуратора == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Original_ФИОКуратора));
            }
            if ((Original_ФИОСтаросты == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Original_ФИОСтаросты));
            }
            this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(IDГруппы));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string НомерГруппы, string ФИОКуратора, string ФИОСтаросты, int Original_IDГруппы, string Original_НомерГруппы, string Original_ФИОКуратора, string Original_ФИОСтаросты) {
            return this.Update(НомерГруппы, ФИОКуратора, ФИОСтаросты, Original_IDГруппы, Original_НомерГруппы, Original_ФИОКуратора, Original_ФИОСтаросты, Original_IDГруппы);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ДоговорыTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public ДоговорыTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Договоры";
            tableMapping.ColumnMappings.Add("IDДоговора", "IDДоговора");
            tableMapping.ColumnMappings.Add("НомерДоговора", "НомерДоговора");
            tableMapping.ColumnMappings.Add("ДатаЗаключения", "ДатаЗаключения");
            tableMapping.ColumnMappings.Add("ФИОИсполнителя", "ФИОИсполнителя");
            tableMapping.ColumnMappings.Add("ДолжностьИсполнителя", "ДолжностьИсполнителя");
            tableMapping.ColumnMappings.Add("НазваниеПредприятия", "НазваниеПредприятия");
            tableMapping.ColumnMappings.Add("УченаяСтепень", "УченаяСтепень");
            tableMapping.ColumnMappings.Add("Звание", "Звание");
            tableMapping.ColumnMappings.Add("СерияПаспорта", "СерияПаспорта");
            tableMapping.ColumnMappings.Add("НомерПаспорта", "НомерПаспорта");
            tableMapping.ColumnMappings.Add("ДатаВыдачи", "ДатаВыдачи");
            tableMapping.ColumnMappings.Add("ОрганВыдачи", "ОрганВыдачи");
            tableMapping.ColumnMappings.Add("ИдентификационныйНомер", "ИдентификационныйНомер");
            tableMapping.ColumnMappings.Add("НомерСтраховогоСвидетельства", "НомерСтраховогоСвидетельства");
            tableMapping.ColumnMappings.Add("ДомашнийАдрес", "ДомашнийАдрес");
            tableMapping.ColumnMappings.Add("ТелРабочий", "ТелРабочий");
            tableMapping.ColumnMappings.Add("ТелДомашний", "ТелДомашний");
            tableMapping.ColumnMappings.Add("МестоОсновнойРаботы", "МестоОсновнойРаботы");
            tableMapping.ColumnMappings.Add("IDСтудента", "IDСтудента");
            tableMapping.ColumnMappings.Add("ДатаПроведения", "ДатаПроведения");
            tableMapping.ColumnMappings.Add("КоличествоЧасов", "КоличествоЧасов");
            tableMapping.ColumnMappings.Add("СтоимостьОдногоЧаса", "СтоимостьОдногоЧаса");
            tableMapping.ColumnMappings.Add("ОбщаяСумма", "ОбщаяСумма");
            tableMapping.ColumnMappings.Add("НомерПриказа", "НомерПриказа");
            tableMapping.ColumnMappings.Add("ДатаПриказа", "ДатаПриказа");
            tableMapping.ColumnMappings.Add("ФИООтделаКадров", "ФИООтделаКадров");
            tableMapping.ColumnMappings.Add("ФИОЗавКафедрой", "ФИОЗавКафедрой");
            tableMapping.ColumnMappings.Add("НазваниеКафедры", "НазваниеКафедры");
            tableMapping.ColumnMappings.Add("РуководительПрактики", "РуководительПрактики");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Договоры] WHERE (([IDДоговора] = @Original_IDДоговора) AND ([Н" +
                "омерДоговора] = @Original_НомерДоговора) AND ([ДатаЗаключения] = @Original_ДатаЗ" +
                "аключения) AND ([ФИОИсполнителя] = @Original_ФИОИсполнителя) AND ([ДолжностьИспо" +
                "лнителя] = @Original_ДолжностьИсполнителя) AND ([НазваниеПредприятия] = @Origina" +
                "l_НазваниеПредприятия) AND ((@IsNull_УченаяСтепень = 1 AND [УченаяСтепень] IS NU" +
                "LL) OR ([УченаяСтепень] = @Original_УченаяСтепень)) AND ((@IsNull_Звание = 1 AND" +
                " [Звание] IS NULL) OR ([Звание] = @Original_Звание)) AND ([СерияПаспорта] = @Ori" +
                "ginal_СерияПаспорта) AND ([НомерПаспорта] = @Original_НомерПаспорта) AND ([ДатаВ" +
                "ыдачи] = @Original_ДатаВыдачи) AND ([ОрганВыдачи] = @Original_ОрганВыдачи) AND (" +
                "[ИдентификационныйНомер] = @Original_ИдентификационныйНомер) AND ((@IsNull_Номер" +
                "СтраховогоСвидетельства = 1 AND [НомерСтраховогоСвидетельства] IS NULL) OR ([Ном" +
                "ерСтраховогоСвидетельства] = @Original_НомерСтраховогоСвидетельства)) AND ([Дома" +
                "шнийАдрес] = @Original_ДомашнийАдрес) AND ([ТелРабочий] = @Original_ТелРабочий) " +
                "AND ((@IsNull_ТелДомашний = 1 AND [ТелДомашний] IS NULL) OR ([ТелДомашний] = @Or" +
                "iginal_ТелДомашний)) AND ((@IsNull_МестоОсновнойРаботы = 1 AND [МестоОсновнойРаб" +
                "оты] IS NULL) OR ([МестоОсновнойРаботы] = @Original_МестоОсновнойРаботы)) AND ([" +
                "IDСтудента] = @Original_IDСтудента) AND ([ДатаПроведения] = @Original_ДатаПровед" +
                "ения) AND ([КоличествоЧасов] = @Original_КоличествоЧасов) AND ([СтоимостьОдногоЧ" +
                "аса] = @Original_СтоимостьОдногоЧаса) AND ([ОбщаяСумма] = @Original_ОбщаяСумма) " +
                "AND ([НомерПриказа] = @Original_НомерПриказа) AND ([ДатаПриказа] = @Original_Дат" +
                "аПриказа) AND ((@IsNull_ФИООтделаКадров = 1 AND [ФИООтделаКадров] IS NULL) OR ([" +
                "ФИООтделаКадров] = @Original_ФИООтделаКадров)) AND ([ФИОЗавКафедрой] = @Original" +
                "_ФИОЗавКафедрой) AND ([НазваниеКафедры] = @Original_НазваниеКафедры) AND ([Руков" +
                "одительПрактики] = @Original_РуководительПрактики))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IDДоговора", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDДоговора", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_НомерДоговора", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НомерДоговора", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ДатаЗаключения", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ДатаЗаключения", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ФИОИсполнителя", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ФИОИсполнителя", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ДолжностьИсполнителя", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ДолжностьИсполнителя", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_НазваниеПредприятия", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НазваниеПредприятия", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_УченаяСтепень", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "УченаяСтепень", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_УченаяСтепень", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "УченаяСтепень", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Звание", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Звание", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Звание", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Звание", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_СерияПаспорта", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "СерияПаспорта", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_НомерПаспорта", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НомерПаспорта", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ДатаВыдачи", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ДатаВыдачи", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ОрганВыдачи", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ОрганВыдачи", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ИдентификационныйНомер", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ИдентификационныйНомер", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_НомерСтраховогоСвидетельства", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НомерСтраховогоСвидетельства", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_НомерСтраховогоСвидетельства", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НомерСтраховогоСвидетельства", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ДомашнийАдрес", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ДомашнийАдрес", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ТелРабочий", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ТелРабочий", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ТелДомашний", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ТелДомашний", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ТелДомашний", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ТелДомашний", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_МестоОсновнойРаботы", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "МестоОсновнойРаботы", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_МестоОсновнойРаботы", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "МестоОсновнойРаботы", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IDСтудента", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDСтудента", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ДатаПроведения", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ДатаПроведения", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_КоличествоЧасов", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "КоличествоЧасов", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_СтоимостьОдногоЧаса", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "СтоимостьОдногоЧаса", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ОбщаяСумма", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ОбщаяСумма", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_НомерПриказа", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НомерПриказа", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ДатаПриказа", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ДатаПриказа", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ФИООтделаКадров", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ФИООтделаКадров", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ФИООтделаКадров", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ФИООтделаКадров", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ФИОЗавКафедрой", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ФИОЗавКафедрой", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_НазваниеКафедры", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НазваниеКафедры", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_РуководительПрактики", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "РуководительПрактики", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Договоры] ([IDДоговора], [НомерДоговора], [ДатаЗаключения], [Ф" +
                "ИОИсполнителя], [ДолжностьИсполнителя], [НазваниеПредприятия], [УченаяСтепень], " +
                "[Звание], [СерияПаспорта], [НомерПаспорта], [ДатаВыдачи], [ОрганВыдачи], [Иденти" +
                "фикационныйНомер], [НомерСтраховогоСвидетельства], [ДомашнийАдрес], [ТелРабочий]" +
                ", [ТелДомашний], [МестоОсновнойРаботы], [ДатаПроведения], [КоличествоЧасов], [Ст" +
                "оимостьОдногоЧаса], [ОбщаяСумма], [НомерПриказа], [ДатаПриказа], [ФИООтделаКадро" +
                "в], [ФИОЗавКафедрой], [НазваниеКафедры], [РуководительПрактики]) VALUES (@IDДого" +
                "вора, @НомерДоговора, @ДатаЗаключения, @ФИОИсполнителя, @ДолжностьИсполнителя, @" +
                "НазваниеПредприятия, @УченаяСтепень, @Звание, @СерияПаспорта, @НомерПаспорта, @Д" +
                "атаВыдачи, @ОрганВыдачи, @ИдентификационныйНомер, @НомерСтраховогоСвидетельства," +
                " @ДомашнийАдрес, @ТелРабочий, @ТелДомашний, @МестоОсновнойРаботы, @ДатаПроведени" +
                "я, @КоличествоЧасов, @СтоимостьОдногоЧаса, @ОбщаяСумма, @НомерПриказа, @ДатаПрик" +
                "аза, @ФИООтделаКадров, @ФИОЗавКафедрой, @НазваниеКафедры, @РуководительПрактики)" +
                ";\r\nSELECT IDДоговора, НомерДоговора, ДатаЗаключения, ФИОИсполнителя, ДолжностьИс" +
                "полнителя, НазваниеПредприятия, УченаяСтепень, Звание, СерияПаспорта, НомерПаспо" +
                "рта, ДатаВыдачи, ОрганВыдачи, ИдентификационныйНомер, НомерСтраховогоСвидетельст" +
                "ва, ДомашнийАдрес, ТелРабочий, ТелДомашний, МестоОсновнойРаботы, IDСтудента, Дат" +
                "аПроведения, КоличествоЧасов, СтоимостьОдногоЧаса, ОбщаяСумма, НомерПриказа, Дат" +
                "аПриказа, ФИООтделаКадров, ФИОЗавКафедрой, НазваниеКафедры, РуководительПрактики" +
                " FROM Договоры WHERE (IDДоговора = @IDДоговора)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDДоговора", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDДоговора", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@НомерДоговора", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НомерДоговора", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ДатаЗаключения", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ДатаЗаключения", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ФИОИсполнителя", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ФИОИсполнителя", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ДолжностьИсполнителя", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ДолжностьИсполнителя", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@НазваниеПредприятия", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НазваниеПредприятия", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@УченаяСтепень", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "УченаяСтепень", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Звание", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Звание", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@СерияПаспорта", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "СерияПаспорта", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@НомерПаспорта", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НомерПаспорта", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ДатаВыдачи", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ДатаВыдачи", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ОрганВыдачи", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ОрганВыдачи", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ИдентификационныйНомер", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ИдентификационныйНомер", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@НомерСтраховогоСвидетельства", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НомерСтраховогоСвидетельства", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ДомашнийАдрес", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ДомашнийАдрес", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ТелРабочий", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ТелРабочий", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ТелДомашний", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ТелДомашний", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@МестоОсновнойРаботы", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "МестоОсновнойРаботы", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ДатаПроведения", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ДатаПроведения", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@КоличествоЧасов", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "КоличествоЧасов", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@СтоимостьОдногоЧаса", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "СтоимостьОдногоЧаса", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ОбщаяСумма", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ОбщаяСумма", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@НомерПриказа", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НомерПриказа", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ДатаПриказа", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ДатаПриказа", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ФИООтделаКадров", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ФИООтделаКадров", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ФИОЗавКафедрой", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ФИОЗавКафедрой", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@НазваниеКафедры", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НазваниеКафедры", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@РуководительПрактики", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "РуководительПрактики", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Договоры] SET [IDДоговора] = @IDДоговора, [НомерДоговора] = @НомерД" +
                "оговора, [ДатаЗаключения] = @ДатаЗаключения, [ФИОИсполнителя] = @ФИОИсполнителя," +
                " [ДолжностьИсполнителя] = @ДолжностьИсполнителя, [НазваниеПредприятия] = @Назван" +
                "иеПредприятия, [УченаяСтепень] = @УченаяСтепень, [Звание] = @Звание, [СерияПаспо" +
                "рта] = @СерияПаспорта, [НомерПаспорта] = @НомерПаспорта, [ДатаВыдачи] = @ДатаВыд" +
                "ачи, [ОрганВыдачи] = @ОрганВыдачи, [ИдентификационныйНомер] = @Идентификационный" +
                "Номер, [НомерСтраховогоСвидетельства] = @НомерСтраховогоСвидетельства, [Домашний" +
                "Адрес] = @ДомашнийАдрес, [ТелРабочий] = @ТелРабочий, [ТелДомашний] = @ТелДомашни" +
                "й, [МестоОсновнойРаботы] = @МестоОсновнойРаботы, [ДатаПроведения] = @ДатаПроведе" +
                "ния, [КоличествоЧасов] = @КоличествоЧасов, [СтоимостьОдногоЧаса] = @СтоимостьОдн" +
                "огоЧаса, [ОбщаяСумма] = @ОбщаяСумма, [НомерПриказа] = @НомерПриказа, [ДатаПриказ" +
                "а] = @ДатаПриказа, [ФИООтделаКадров] = @ФИООтделаКадров, [ФИОЗавКафедрой] = @ФИО" +
                "ЗавКафедрой, [НазваниеКафедры] = @НазваниеКафедры, [РуководительПрактики] = @Рук" +
                "оводительПрактики WHERE (([IDДоговора] = @Original_IDДоговора) AND ([НомерДогово" +
                "ра] = @Original_НомерДоговора) AND ([ДатаЗаключения] = @Original_ДатаЗаключения)" +
                " AND ([ФИОИсполнителя] = @Original_ФИОИсполнителя) AND ([ДолжностьИсполнителя] =" +
                " @Original_ДолжностьИсполнителя) AND ([НазваниеПредприятия] = @Original_Название" +
                "Предприятия) AND ((@IsNull_УченаяСтепень = 1 AND [УченаяСтепень] IS NULL) OR ([У" +
                "ченаяСтепень] = @Original_УченаяСтепень)) AND ((@IsNull_Звание = 1 AND [Звание] " +
                "IS NULL) OR ([Звание] = @Original_Звание)) AND ([СерияПаспорта] = @Original_Сери" +
                "яПаспорта) AND ([НомерПаспорта] = @Original_НомерПаспорта) AND ([ДатаВыдачи] = @" +
                "Original_ДатаВыдачи) AND ([ОрганВыдачи] = @Original_ОрганВыдачи) AND ([Идентифик" +
                "ационныйНомер] = @Original_ИдентификационныйНомер) AND ((@IsNull_НомерСтрахового" +
                "Свидетельства = 1 AND [НомерСтраховогоСвидетельства] IS NULL) OR ([НомерСтрахово" +
                "гоСвидетельства] = @Original_НомерСтраховогоСвидетельства)) AND ([ДомашнийАдрес]" +
                " = @Original_ДомашнийАдрес) AND ([ТелРабочий] = @Original_ТелРабочий) AND ((@IsN" +
                "ull_ТелДомашний = 1 AND [ТелДомашний] IS NULL) OR ([ТелДомашний] = @Original_Тел" +
                "Домашний)) AND ((@IsNull_МестоОсновнойРаботы = 1 AND [МестоОсновнойРаботы] IS NU" +
                "LL) OR ([МестоОсновнойРаботы] = @Original_МестоОсновнойРаботы)) AND ([IDСтудента" +
                "] = @Original_IDСтудента) AND ([ДатаПроведения] = @Original_ДатаПроведения) AND " +
                "([КоличествоЧасов] = @Original_КоличествоЧасов) AND ([СтоимостьОдногоЧаса] = @Or" +
                "iginal_СтоимостьОдногоЧаса) AND ([ОбщаяСумма] = @Original_ОбщаяСумма) AND ([Номе" +
                "рПриказа] = @Original_НомерПриказа) AND ([ДатаПриказа] = @Original_ДатаПриказа) " +
                "AND ((@IsNull_ФИООтделаКадров = 1 AND [ФИООтделаКадров] IS NULL) OR ([ФИООтделаК" +
                "адров] = @Original_ФИООтделаКадров)) AND ([ФИОЗавКафедрой] = @Original_ФИОЗавКаф" +
                "едрой) AND ([НазваниеКафедры] = @Original_НазваниеКафедры) AND ([РуководительПра" +
                "ктики] = @Original_РуководительПрактики));\r\nSELECT IDДоговора, НомерДоговора, Да" +
                "таЗаключения, ФИОИсполнителя, ДолжностьИсполнителя, НазваниеПредприятия, УченаяС" +
                "тепень, Звание, СерияПаспорта, НомерПаспорта, ДатаВыдачи, ОрганВыдачи, Идентифик" +
                "ационныйНомер, НомерСтраховогоСвидетельства, ДомашнийАдрес, ТелРабочий, ТелДомаш" +
                "ний, МестоОсновнойРаботы, IDСтудента, ДатаПроведения, КоличествоЧасов, Стоимость" +
                "ОдногоЧаса, ОбщаяСумма, НомерПриказа, ДатаПриказа, ФИООтделаКадров, ФИОЗавКафедр" +
                "ой, НазваниеКафедры, РуководительПрактики FROM Договоры WHERE (IDДоговора = @IDД" +
                "оговора)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDДоговора", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDДоговора", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@НомерДоговора", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НомерДоговора", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ДатаЗаключения", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ДатаЗаключения", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ФИОИсполнителя", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ФИОИсполнителя", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ДолжностьИсполнителя", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ДолжностьИсполнителя", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@НазваниеПредприятия", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НазваниеПредприятия", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@УченаяСтепень", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "УченаяСтепень", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Звание", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Звание", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@СерияПаспорта", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "СерияПаспорта", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@НомерПаспорта", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НомерПаспорта", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ДатаВыдачи", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ДатаВыдачи", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ОрганВыдачи", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ОрганВыдачи", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ИдентификационныйНомер", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ИдентификационныйНомер", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@НомерСтраховогоСвидетельства", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НомерСтраховогоСвидетельства", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ДомашнийАдрес", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ДомашнийАдрес", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ТелРабочий", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ТелРабочий", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ТелДомашний", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ТелДомашний", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@МестоОсновнойРаботы", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "МестоОсновнойРаботы", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ДатаПроведения", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ДатаПроведения", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@КоличествоЧасов", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "КоличествоЧасов", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@СтоимостьОдногоЧаса", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "СтоимостьОдногоЧаса", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ОбщаяСумма", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ОбщаяСумма", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@НомерПриказа", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НомерПриказа", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ДатаПриказа", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ДатаПриказа", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ФИООтделаКадров", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ФИООтделаКадров", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ФИОЗавКафедрой", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ФИОЗавКафедрой", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@НазваниеКафедры", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НазваниеКафедры", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@РуководительПрактики", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "РуководительПрактики", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IDДоговора", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDДоговора", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_НомерДоговора", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НомерДоговора", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ДатаЗаключения", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ДатаЗаключения", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ФИОИсполнителя", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ФИОИсполнителя", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ДолжностьИсполнителя", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ДолжностьИсполнителя", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_НазваниеПредприятия", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НазваниеПредприятия", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_УченаяСтепень", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "УченаяСтепень", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_УченаяСтепень", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "УченаяСтепень", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Звание", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Звание", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Звание", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Звание", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_СерияПаспорта", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "СерияПаспорта", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_НомерПаспорта", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НомерПаспорта", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ДатаВыдачи", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ДатаВыдачи", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ОрганВыдачи", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ОрганВыдачи", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ИдентификационныйНомер", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ИдентификационныйНомер", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_НомерСтраховогоСвидетельства", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НомерСтраховогоСвидетельства", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_НомерСтраховогоСвидетельства", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НомерСтраховогоСвидетельства", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ДомашнийАдрес", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ДомашнийАдрес", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ТелРабочий", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ТелРабочий", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ТелДомашний", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ТелДомашний", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ТелДомашний", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ТелДомашний", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_МестоОсновнойРаботы", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "МестоОсновнойРаботы", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_МестоОсновнойРаботы", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "МестоОсновнойРаботы", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IDСтудента", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDСтудента", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ДатаПроведения", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ДатаПроведения", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_КоличествоЧасов", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "КоличествоЧасов", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_СтоимостьОдногоЧаса", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "СтоимостьОдногоЧаса", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ОбщаяСумма", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ОбщаяСумма", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_НомерПриказа", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НомерПриказа", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ДатаПриказа", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ДатаПриказа", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ФИООтделаКадров", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ФИООтделаКадров", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ФИООтделаКадров", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ФИООтделаКадров", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ФИОЗавКафедрой", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ФИОЗавКафедрой", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_НазваниеКафедры", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НазваниеКафедры", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_РуководительПрактики", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "РуководительПрактики", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::kursachMain.Properties.Settings.Default.kursachConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT IDДоговора, НомерДоговора, ДатаЗаключения, ФИОИсполнителя, ДолжностьИсполнителя, НазваниеПредприятия, УченаяСтепень, Звание, СерияПаспорта, НомерПаспорта, ДатаВыдачи, ОрганВыдачи, ИдентификационныйНомер, НомерСтраховогоСвидетельства, ДомашнийАдрес, ТелРабочий, ТелДомашний, МестоОсновнойРаботы, IDСтудента, ДатаПроведения, КоличествоЧасов, СтоимостьОдногоЧаса, ОбщаяСумма, НомерПриказа, ДатаПриказа, ФИООтделаКадров, ФИОЗавКафедрой, НазваниеКафедры, РуководительПрактики FROM dbo.Договоры";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(kursachDataSet.ДоговорыDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual kursachDataSet.ДоговорыDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            kursachDataSet.ДоговорыDataTable dataTable = new kursachDataSet.ДоговорыDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(kursachDataSet.ДоговорыDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(kursachDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Договоры");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(
                    int Original_IDДоговора, 
                    string Original_НомерДоговора, 
                    string Original_ДатаЗаключения, 
                    string Original_ФИОИсполнителя, 
                    string Original_ДолжностьИсполнителя, 
                    string Original_НазваниеПредприятия, 
                    string Original_УченаяСтепень, 
                    string Original_Звание, 
                    string Original_СерияПаспорта, 
                    string Original_НомерПаспорта, 
                    string Original_ДатаВыдачи, 
                    string Original_ОрганВыдачи, 
                    string Original_ИдентификационныйНомер, 
                    string Original_НомерСтраховогоСвидетельства, 
                    string Original_ДомашнийАдрес, 
                    string Original_ТелРабочий, 
                    string Original_ТелДомашний, 
                    string Original_МестоОсновнойРаботы, 
                    int Original_IDСтудента, 
                    string Original_ДатаПроведения, 
                    string Original_КоличествоЧасов, 
                    string Original_СтоимостьОдногоЧаса, 
                    string Original_ОбщаяСумма, 
                    string Original_НомерПриказа, 
                    string Original_ДатаПриказа, 
                    string Original_ФИООтделаКадров, 
                    string Original_ФИОЗавКафедрой, 
                    string Original_НазваниеКафедры, 
                    string Original_РуководительПрактики) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_IDДоговора));
            if ((Original_НомерДоговора == null)) {
                throw new global::System.ArgumentNullException("Original_НомерДоговора");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_НомерДоговора));
            }
            if ((Original_ДатаЗаключения == null)) {
                throw new global::System.ArgumentNullException("Original_ДатаЗаключения");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_ДатаЗаключения));
            }
            if ((Original_ФИОИсполнителя == null)) {
                throw new global::System.ArgumentNullException("Original_ФИОИсполнителя");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_ФИОИсполнителя));
            }
            if ((Original_ДолжностьИсполнителя == null)) {
                throw new global::System.ArgumentNullException("Original_ДолжностьИсполнителя");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_ДолжностьИсполнителя));
            }
            if ((Original_НазваниеПредприятия == null)) {
                throw new global::System.ArgumentNullException("Original_НазваниеПредприятия");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_НазваниеПредприятия));
            }
            if ((Original_УченаяСтепень == null)) {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[7].Value = ((string)(Original_УченаяСтепень));
            }
            if ((Original_Звание == null)) {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[9].Value = ((string)(Original_Звание));
            }
            if ((Original_СерияПаспорта == null)) {
                throw new global::System.ArgumentNullException("Original_СерияПаспорта");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((string)(Original_СерияПаспорта));
            }
            if ((Original_НомерПаспорта == null)) {
                throw new global::System.ArgumentNullException("Original_НомерПаспорта");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((string)(Original_НомерПаспорта));
            }
            if ((Original_ДатаВыдачи == null)) {
                throw new global::System.ArgumentNullException("Original_ДатаВыдачи");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((string)(Original_ДатаВыдачи));
            }
            if ((Original_ОрганВыдачи == null)) {
                throw new global::System.ArgumentNullException("Original_ОрганВыдачи");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((string)(Original_ОрганВыдачи));
            }
            if ((Original_ИдентификационныйНомер == null)) {
                throw new global::System.ArgumentNullException("Original_ИдентификационныйНомер");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[14].Value = ((string)(Original_ИдентификационныйНомер));
            }
            if ((Original_НомерСтраховогоСвидетельства == null)) {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[16].Value = ((string)(Original_НомерСтраховогоСвидетельства));
            }
            if ((Original_ДомашнийАдрес == null)) {
                throw new global::System.ArgumentNullException("Original_ДомашнийАдрес");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((string)(Original_ДомашнийАдрес));
            }
            if ((Original_ТелРабочий == null)) {
                throw new global::System.ArgumentNullException("Original_ТелРабочий");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[18].Value = ((string)(Original_ТелРабочий));
            }
            if ((Original_ТелДомашний == null)) {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[20].Value = ((string)(Original_ТелДомашний));
            }
            if ((Original_МестоОсновнойРаботы == null)) {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[22].Value = ((string)(Original_МестоОсновнойРаботы));
            }
            this.Adapter.DeleteCommand.Parameters[23].Value = ((int)(Original_IDСтудента));
            if ((Original_ДатаПроведения == null)) {
                throw new global::System.ArgumentNullException("Original_ДатаПроведения");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[24].Value = ((string)(Original_ДатаПроведения));
            }
            if ((Original_КоличествоЧасов == null)) {
                throw new global::System.ArgumentNullException("Original_КоличествоЧасов");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[25].Value = ((string)(Original_КоличествоЧасов));
            }
            if ((Original_СтоимостьОдногоЧаса == null)) {
                throw new global::System.ArgumentNullException("Original_СтоимостьОдногоЧаса");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[26].Value = ((string)(Original_СтоимостьОдногоЧаса));
            }
            if ((Original_ОбщаяСумма == null)) {
                throw new global::System.ArgumentNullException("Original_ОбщаяСумма");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[27].Value = ((string)(Original_ОбщаяСумма));
            }
            if ((Original_НомерПриказа == null)) {
                throw new global::System.ArgumentNullException("Original_НомерПриказа");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[28].Value = ((string)(Original_НомерПриказа));
            }
            if ((Original_ДатаПриказа == null)) {
                throw new global::System.ArgumentNullException("Original_ДатаПриказа");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[29].Value = ((string)(Original_ДатаПриказа));
            }
            if ((Original_ФИООтделаКадров == null)) {
                this.Adapter.DeleteCommand.Parameters[30].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[31].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[30].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[31].Value = ((string)(Original_ФИООтделаКадров));
            }
            if ((Original_ФИОЗавКафедрой == null)) {
                throw new global::System.ArgumentNullException("Original_ФИОЗавКафедрой");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[32].Value = ((string)(Original_ФИОЗавКафедрой));
            }
            if ((Original_НазваниеКафедры == null)) {
                throw new global::System.ArgumentNullException("Original_НазваниеКафедры");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[33].Value = ((string)(Original_НазваниеКафедры));
            }
            if ((Original_РуководительПрактики == null)) {
                throw new global::System.ArgumentNullException("Original_РуководительПрактики");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[34].Value = ((string)(Original_РуководительПрактики));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    int IDДоговора, 
                    string НомерДоговора, 
                    string ДатаЗаключения, 
                    string ФИОИсполнителя, 
                    string ДолжностьИсполнителя, 
                    string НазваниеПредприятия, 
                    string УченаяСтепень, 
                    string Звание, 
                    string СерияПаспорта, 
                    string НомерПаспорта, 
                    string ДатаВыдачи, 
                    string ОрганВыдачи, 
                    string ИдентификационныйНомер, 
                    string НомерСтраховогоСвидетельства, 
                    string ДомашнийАдрес, 
                    string ТелРабочий, 
                    string ТелДомашний, 
                    string МестоОсновнойРаботы, 
                    string ДатаПроведения, 
                    string КоличествоЧасов, 
                    string СтоимостьОдногоЧаса, 
                    string ОбщаяСумма, 
                    string НомерПриказа, 
                    string ДатаПриказа, 
                    string ФИООтделаКадров, 
                    string ФИОЗавКафедрой, 
                    string НазваниеКафедры, 
                    string РуководительПрактики) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(IDДоговора));
            if ((НомерДоговора == null)) {
                throw new global::System.ArgumentNullException("НомерДоговора");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(НомерДоговора));
            }
            if ((ДатаЗаключения == null)) {
                throw new global::System.ArgumentNullException("ДатаЗаключения");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(ДатаЗаключения));
            }
            if ((ФИОИсполнителя == null)) {
                throw new global::System.ArgumentNullException("ФИОИсполнителя");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(ФИОИсполнителя));
            }
            if ((ДолжностьИсполнителя == null)) {
                throw new global::System.ArgumentNullException("ДолжностьИсполнителя");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(ДолжностьИсполнителя));
            }
            if ((НазваниеПредприятия == null)) {
                throw new global::System.ArgumentNullException("НазваниеПредприятия");
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(НазваниеПредприятия));
            }
            if ((УченаяСтепень == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(УченаяСтепень));
            }
            if ((Звание == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(Звание));
            }
            if ((СерияПаспорта == null)) {
                throw new global::System.ArgumentNullException("СерияПаспорта");
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(СерияПаспорта));
            }
            if ((НомерПаспорта == null)) {
                throw new global::System.ArgumentNullException("НомерПаспорта");
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(НомерПаспорта));
            }
            if ((ДатаВыдачи == null)) {
                throw new global::System.ArgumentNullException("ДатаВыдачи");
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(ДатаВыдачи));
            }
            if ((ОрганВыдачи == null)) {
                throw new global::System.ArgumentNullException("ОрганВыдачи");
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = ((string)(ОрганВыдачи));
            }
            if ((ИдентификационныйНомер == null)) {
                throw new global::System.ArgumentNullException("ИдентификационныйНомер");
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = ((string)(ИдентификационныйНомер));
            }
            if ((НомерСтраховогоСвидетельства == null)) {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = ((string)(НомерСтраховогоСвидетельства));
            }
            if ((ДомашнийАдрес == null)) {
                throw new global::System.ArgumentNullException("ДомашнийАдрес");
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = ((string)(ДомашнийАдрес));
            }
            if ((ТелРабочий == null)) {
                throw new global::System.ArgumentNullException("ТелРабочий");
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = ((string)(ТелРабочий));
            }
            if ((ТелДомашний == null)) {
                this.Adapter.InsertCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = ((string)(ТелДомашний));
            }
            if ((МестоОсновнойРаботы == null)) {
                this.Adapter.InsertCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = ((string)(МестоОсновнойРаботы));
            }
            if ((ДатаПроведения == null)) {
                throw new global::System.ArgumentNullException("ДатаПроведения");
            }
            else {
                this.Adapter.InsertCommand.Parameters[18].Value = ((string)(ДатаПроведения));
            }
            if ((КоличествоЧасов == null)) {
                throw new global::System.ArgumentNullException("КоличествоЧасов");
            }
            else {
                this.Adapter.InsertCommand.Parameters[19].Value = ((string)(КоличествоЧасов));
            }
            if ((СтоимостьОдногоЧаса == null)) {
                throw new global::System.ArgumentNullException("СтоимостьОдногоЧаса");
            }
            else {
                this.Adapter.InsertCommand.Parameters[20].Value = ((string)(СтоимостьОдногоЧаса));
            }
            if ((ОбщаяСумма == null)) {
                throw new global::System.ArgumentNullException("ОбщаяСумма");
            }
            else {
                this.Adapter.InsertCommand.Parameters[21].Value = ((string)(ОбщаяСумма));
            }
            if ((НомерПриказа == null)) {
                throw new global::System.ArgumentNullException("НомерПриказа");
            }
            else {
                this.Adapter.InsertCommand.Parameters[22].Value = ((string)(НомерПриказа));
            }
            if ((ДатаПриказа == null)) {
                throw new global::System.ArgumentNullException("ДатаПриказа");
            }
            else {
                this.Adapter.InsertCommand.Parameters[23].Value = ((string)(ДатаПриказа));
            }
            if ((ФИООтделаКадров == null)) {
                this.Adapter.InsertCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[24].Value = ((string)(ФИООтделаКадров));
            }
            if ((ФИОЗавКафедрой == null)) {
                throw new global::System.ArgumentNullException("ФИОЗавКафедрой");
            }
            else {
                this.Adapter.InsertCommand.Parameters[25].Value = ((string)(ФИОЗавКафедрой));
            }
            if ((НазваниеКафедры == null)) {
                throw new global::System.ArgumentNullException("НазваниеКафедры");
            }
            else {
                this.Adapter.InsertCommand.Parameters[26].Value = ((string)(НазваниеКафедры));
            }
            if ((РуководительПрактики == null)) {
                throw new global::System.ArgumentNullException("РуководительПрактики");
            }
            else {
                this.Adapter.InsertCommand.Parameters[27].Value = ((string)(РуководительПрактики));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int IDДоговора, 
                    string НомерДоговора, 
                    string ДатаЗаключения, 
                    string ФИОИсполнителя, 
                    string ДолжностьИсполнителя, 
                    string НазваниеПредприятия, 
                    string УченаяСтепень, 
                    string Звание, 
                    string СерияПаспорта, 
                    string НомерПаспорта, 
                    string ДатаВыдачи, 
                    string ОрганВыдачи, 
                    string ИдентификационныйНомер, 
                    string НомерСтраховогоСвидетельства, 
                    string ДомашнийАдрес, 
                    string ТелРабочий, 
                    string ТелДомашний, 
                    string МестоОсновнойРаботы, 
                    string ДатаПроведения, 
                    string КоличествоЧасов, 
                    string СтоимостьОдногоЧаса, 
                    string ОбщаяСумма, 
                    string НомерПриказа, 
                    string ДатаПриказа, 
                    string ФИООтделаКадров, 
                    string ФИОЗавКафедрой, 
                    string НазваниеКафедры, 
                    string РуководительПрактики, 
                    int Original_IDДоговора, 
                    string Original_НомерДоговора, 
                    string Original_ДатаЗаключения, 
                    string Original_ФИОИсполнителя, 
                    string Original_ДолжностьИсполнителя, 
                    string Original_НазваниеПредприятия, 
                    string Original_УченаяСтепень, 
                    string Original_Звание, 
                    string Original_СерияПаспорта, 
                    string Original_НомерПаспорта, 
                    string Original_ДатаВыдачи, 
                    string Original_ОрганВыдачи, 
                    string Original_ИдентификационныйНомер, 
                    string Original_НомерСтраховогоСвидетельства, 
                    string Original_ДомашнийАдрес, 
                    string Original_ТелРабочий, 
                    string Original_ТелДомашний, 
                    string Original_МестоОсновнойРаботы, 
                    int Original_IDСтудента, 
                    string Original_ДатаПроведения, 
                    string Original_КоличествоЧасов, 
                    string Original_СтоимостьОдногоЧаса, 
                    string Original_ОбщаяСумма, 
                    string Original_НомерПриказа, 
                    string Original_ДатаПриказа, 
                    string Original_ФИООтделаКадров, 
                    string Original_ФИОЗавКафедрой, 
                    string Original_НазваниеКафедры, 
                    string Original_РуководительПрактики) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(IDДоговора));
            if ((НомерДоговора == null)) {
                throw new global::System.ArgumentNullException("НомерДоговора");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(НомерДоговора));
            }
            if ((ДатаЗаключения == null)) {
                throw new global::System.ArgumentNullException("ДатаЗаключения");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(ДатаЗаключения));
            }
            if ((ФИОИсполнителя == null)) {
                throw new global::System.ArgumentNullException("ФИОИсполнителя");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(ФИОИсполнителя));
            }
            if ((ДолжностьИсполнителя == null)) {
                throw new global::System.ArgumentNullException("ДолжностьИсполнителя");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(ДолжностьИсполнителя));
            }
            if ((НазваниеПредприятия == null)) {
                throw new global::System.ArgumentNullException("НазваниеПредприятия");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(НазваниеПредприятия));
            }
            if ((УченаяСтепень == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(УченаяСтепень));
            }
            if ((Звание == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Звание));
            }
            if ((СерияПаспорта == null)) {
                throw new global::System.ArgumentNullException("СерияПаспорта");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(СерияПаспорта));
            }
            if ((НомерПаспорта == null)) {
                throw new global::System.ArgumentNullException("НомерПаспорта");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(НомерПаспорта));
            }
            if ((ДатаВыдачи == null)) {
                throw new global::System.ArgumentNullException("ДатаВыдачи");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(ДатаВыдачи));
            }
            if ((ОрганВыдачи == null)) {
                throw new global::System.ArgumentNullException("ОрганВыдачи");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(ОрганВыдачи));
            }
            if ((ИдентификационныйНомер == null)) {
                throw new global::System.ArgumentNullException("ИдентификационныйНомер");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(ИдентификационныйНомер));
            }
            if ((НомерСтраховогоСвидетельства == null)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(НомерСтраховогоСвидетельства));
            }
            if ((ДомашнийАдрес == null)) {
                throw new global::System.ArgumentNullException("ДомашнийАдрес");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(ДомашнийАдрес));
            }
            if ((ТелРабочий == null)) {
                throw new global::System.ArgumentNullException("ТелРабочий");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(ТелРабочий));
            }
            if ((ТелДомашний == null)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(ТелДомашний));
            }
            if ((МестоОсновнойРаботы == null)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((string)(МестоОсновнойРаботы));
            }
            if ((ДатаПроведения == null)) {
                throw new global::System.ArgumentNullException("ДатаПроведения");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((string)(ДатаПроведения));
            }
            if ((КоличествоЧасов == null)) {
                throw new global::System.ArgumentNullException("КоличествоЧасов");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(КоличествоЧасов));
            }
            if ((СтоимостьОдногоЧаса == null)) {
                throw new global::System.ArgumentNullException("СтоимостьОдногоЧаса");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((string)(СтоимостьОдногоЧаса));
            }
            if ((ОбщаяСумма == null)) {
                throw new global::System.ArgumentNullException("ОбщаяСумма");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((string)(ОбщаяСумма));
            }
            if ((НомерПриказа == null)) {
                throw new global::System.ArgumentNullException("НомерПриказа");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((string)(НомерПриказа));
            }
            if ((ДатаПриказа == null)) {
                throw new global::System.ArgumentNullException("ДатаПриказа");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((string)(ДатаПриказа));
            }
            if ((ФИООтделаКадров == null)) {
                this.Adapter.UpdateCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((string)(ФИООтделаКадров));
            }
            if ((ФИОЗавКафедрой == null)) {
                throw new global::System.ArgumentNullException("ФИОЗавКафедрой");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((string)(ФИОЗавКафедрой));
            }
            if ((НазваниеКафедры == null)) {
                throw new global::System.ArgumentNullException("НазваниеКафедры");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((string)(НазваниеКафедры));
            }
            if ((РуководительПрактики == null)) {
                throw new global::System.ArgumentNullException("РуководительПрактики");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((string)(РуководительПрактики));
            }
            this.Adapter.UpdateCommand.Parameters[28].Value = ((int)(Original_IDДоговора));
            if ((Original_НомерДоговора == null)) {
                throw new global::System.ArgumentNullException("Original_НомерДоговора");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((string)(Original_НомерДоговора));
            }
            if ((Original_ДатаЗаключения == null)) {
                throw new global::System.ArgumentNullException("Original_ДатаЗаключения");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((string)(Original_ДатаЗаключения));
            }
            if ((Original_ФИОИсполнителя == null)) {
                throw new global::System.ArgumentNullException("Original_ФИОИсполнителя");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((string)(Original_ФИОИсполнителя));
            }
            if ((Original_ДолжностьИсполнителя == null)) {
                throw new global::System.ArgumentNullException("Original_ДолжностьИсполнителя");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[32].Value = ((string)(Original_ДолжностьИсполнителя));
            }
            if ((Original_НазваниеПредприятия == null)) {
                throw new global::System.ArgumentNullException("Original_НазваниеПредприятия");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((string)(Original_НазваниеПредприятия));
            }
            if ((Original_УченаяСтепень == null)) {
                this.Adapter.UpdateCommand.Parameters[34].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[35].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[34].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[35].Value = ((string)(Original_УченаяСтепень));
            }
            if ((Original_Звание == null)) {
                this.Adapter.UpdateCommand.Parameters[36].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[37].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[36].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[37].Value = ((string)(Original_Звание));
            }
            if ((Original_СерияПаспорта == null)) {
                throw new global::System.ArgumentNullException("Original_СерияПаспорта");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[38].Value = ((string)(Original_СерияПаспорта));
            }
            if ((Original_НомерПаспорта == null)) {
                throw new global::System.ArgumentNullException("Original_НомерПаспорта");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[39].Value = ((string)(Original_НомерПаспорта));
            }
            if ((Original_ДатаВыдачи == null)) {
                throw new global::System.ArgumentNullException("Original_ДатаВыдачи");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[40].Value = ((string)(Original_ДатаВыдачи));
            }
            if ((Original_ОрганВыдачи == null)) {
                throw new global::System.ArgumentNullException("Original_ОрганВыдачи");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[41].Value = ((string)(Original_ОрганВыдачи));
            }
            if ((Original_ИдентификационныйНомер == null)) {
                throw new global::System.ArgumentNullException("Original_ИдентификационныйНомер");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[42].Value = ((string)(Original_ИдентификационныйНомер));
            }
            if ((Original_НомерСтраховогоСвидетельства == null)) {
                this.Adapter.UpdateCommand.Parameters[43].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[44].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[43].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[44].Value = ((string)(Original_НомерСтраховогоСвидетельства));
            }
            if ((Original_ДомашнийАдрес == null)) {
                throw new global::System.ArgumentNullException("Original_ДомашнийАдрес");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[45].Value = ((string)(Original_ДомашнийАдрес));
            }
            if ((Original_ТелРабочий == null)) {
                throw new global::System.ArgumentNullException("Original_ТелРабочий");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[46].Value = ((string)(Original_ТелРабочий));
            }
            if ((Original_ТелДомашний == null)) {
                this.Adapter.UpdateCommand.Parameters[47].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[48].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[47].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[48].Value = ((string)(Original_ТелДомашний));
            }
            if ((Original_МестоОсновнойРаботы == null)) {
                this.Adapter.UpdateCommand.Parameters[49].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[50].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[49].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[50].Value = ((string)(Original_МестоОсновнойРаботы));
            }
            this.Adapter.UpdateCommand.Parameters[51].Value = ((int)(Original_IDСтудента));
            if ((Original_ДатаПроведения == null)) {
                throw new global::System.ArgumentNullException("Original_ДатаПроведения");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[52].Value = ((string)(Original_ДатаПроведения));
            }
            if ((Original_КоличествоЧасов == null)) {
                throw new global::System.ArgumentNullException("Original_КоличествоЧасов");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[53].Value = ((string)(Original_КоличествоЧасов));
            }
            if ((Original_СтоимостьОдногоЧаса == null)) {
                throw new global::System.ArgumentNullException("Original_СтоимостьОдногоЧаса");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[54].Value = ((string)(Original_СтоимостьОдногоЧаса));
            }
            if ((Original_ОбщаяСумма == null)) {
                throw new global::System.ArgumentNullException("Original_ОбщаяСумма");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[55].Value = ((string)(Original_ОбщаяСумма));
            }
            if ((Original_НомерПриказа == null)) {
                throw new global::System.ArgumentNullException("Original_НомерПриказа");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[56].Value = ((string)(Original_НомерПриказа));
            }
            if ((Original_ДатаПриказа == null)) {
                throw new global::System.ArgumentNullException("Original_ДатаПриказа");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[57].Value = ((string)(Original_ДатаПриказа));
            }
            if ((Original_ФИООтделаКадров == null)) {
                this.Adapter.UpdateCommand.Parameters[58].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[59].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[58].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[59].Value = ((string)(Original_ФИООтделаКадров));
            }
            if ((Original_ФИОЗавКафедрой == null)) {
                throw new global::System.ArgumentNullException("Original_ФИОЗавКафедрой");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[60].Value = ((string)(Original_ФИОЗавКафедрой));
            }
            if ((Original_НазваниеКафедры == null)) {
                throw new global::System.ArgumentNullException("Original_НазваниеКафедры");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[61].Value = ((string)(Original_НазваниеКафедры));
            }
            if ((Original_РуководительПрактики == null)) {
                throw new global::System.ArgumentNullException("Original_РуководительПрактики");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[62].Value = ((string)(Original_РуководительПрактики));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string НомерДоговора, 
                    string ДатаЗаключения, 
                    string ФИОИсполнителя, 
                    string ДолжностьИсполнителя, 
                    string НазваниеПредприятия, 
                    string УченаяСтепень, 
                    string Звание, 
                    string СерияПаспорта, 
                    string НомерПаспорта, 
                    string ДатаВыдачи, 
                    string ОрганВыдачи, 
                    string ИдентификационныйНомер, 
                    string НомерСтраховогоСвидетельства, 
                    string ДомашнийАдрес, 
                    string ТелРабочий, 
                    string ТелДомашний, 
                    string МестоОсновнойРаботы, 
                    string ДатаПроведения, 
                    string КоличествоЧасов, 
                    string СтоимостьОдногоЧаса, 
                    string ОбщаяСумма, 
                    string НомерПриказа, 
                    string ДатаПриказа, 
                    string ФИООтделаКадров, 
                    string ФИОЗавКафедрой, 
                    string НазваниеКафедры, 
                    string РуководительПрактики, 
                    int Original_IDДоговора, 
                    string Original_НомерДоговора, 
                    string Original_ДатаЗаключения, 
                    string Original_ФИОИсполнителя, 
                    string Original_ДолжностьИсполнителя, 
                    string Original_НазваниеПредприятия, 
                    string Original_УченаяСтепень, 
                    string Original_Звание, 
                    string Original_СерияПаспорта, 
                    string Original_НомерПаспорта, 
                    string Original_ДатаВыдачи, 
                    string Original_ОрганВыдачи, 
                    string Original_ИдентификационныйНомер, 
                    string Original_НомерСтраховогоСвидетельства, 
                    string Original_ДомашнийАдрес, 
                    string Original_ТелРабочий, 
                    string Original_ТелДомашний, 
                    string Original_МестоОсновнойРаботы, 
                    int Original_IDСтудента, 
                    string Original_ДатаПроведения, 
                    string Original_КоличествоЧасов, 
                    string Original_СтоимостьОдногоЧаса, 
                    string Original_ОбщаяСумма, 
                    string Original_НомерПриказа, 
                    string Original_ДатаПриказа, 
                    string Original_ФИООтделаКадров, 
                    string Original_ФИОЗавКафедрой, 
                    string Original_НазваниеКафедры, 
                    string Original_РуководительПрактики) {
            return this.Update(Original_IDДоговора, НомерДоговора, ДатаЗаключения, ФИОИсполнителя, ДолжностьИсполнителя, НазваниеПредприятия, УченаяСтепень, Звание, СерияПаспорта, НомерПаспорта, ДатаВыдачи, ОрганВыдачи, ИдентификационныйНомер, НомерСтраховогоСвидетельства, ДомашнийАдрес, ТелРабочий, ТелДомашний, МестоОсновнойРаботы, ДатаПроведения, КоличествоЧасов, СтоимостьОдногоЧаса, ОбщаяСумма, НомерПриказа, ДатаПриказа, ФИООтделаКадров, ФИОЗавКафедрой, НазваниеКафедры, РуководительПрактики, Original_IDДоговора, Original_НомерДоговора, Original_ДатаЗаключения, Original_ФИОИсполнителя, Original_ДолжностьИсполнителя, Original_НазваниеПредприятия, Original_УченаяСтепень, Original_Звание, Original_СерияПаспорта, Original_НомерПаспорта, Original_ДатаВыдачи, Original_ОрганВыдачи, Original_ИдентификационныйНомер, Original_НомерСтраховогоСвидетельства, Original_ДомашнийАдрес, Original_ТелРабочий, Original_ТелДомашний, Original_МестоОсновнойРаботы, Original_IDСтудента, Original_ДатаПроведения, Original_КоличествоЧасов, Original_СтоимостьОдногоЧаса, Original_ОбщаяСумма, Original_НомерПриказа, Original_ДатаПриказа, Original_ФИООтделаКадров, Original_ФИОЗавКафедрой, Original_НазваниеКафедры, Original_РуководительПрактики);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ПланНабораTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public ПланНабораTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ПланНабора";
            tableMapping.ColumnMappings.Add("IDНабораНаГод", "IDНабораНаГод");
            tableMapping.ColumnMappings.Add("Год", "Год");
            tableMapping.ColumnMappings.Add("МаксКолвоСтудентов", "МаксКолвоСтудентов");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[ПланНабора] WHERE (([IDНабораНаГод] = @Original_IDНабораНаГод)" +
                " AND ([Год] = @Original_Год) AND ([МаксКолвоСтудентов] = @Original_МаксКолвоСтуд" +
                "ентов))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IDНабораНаГод", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDНабораНаГод", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Год", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Год", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_МаксКолвоСтудентов", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "МаксКолвоСтудентов", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[ПланНабора] ([Год], [МаксКолвоСтудентов]) VALUES (@Год, @МаксК" +
                "олвоСтудентов);\r\nSELECT IDНабораНаГод, Год, МаксКолвоСтудентов FROM ПланНабора W" +
                "HERE (IDНабораНаГод = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Год", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Год", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@МаксКолвоСтудентов", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "МаксКолвоСтудентов", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[ПланНабора] SET [Год] = @Год, [МаксКолвоСтудентов] = @МаксКолвоСтудентов WHERE (([IDНабораНаГод] = @Original_IDНабораНаГод) AND ([Год] = @Original_Год) AND ([МаксКолвоСтудентов] = @Original_МаксКолвоСтудентов));
SELECT IDНабораНаГод, Год, МаксКолвоСтудентов FROM ПланНабора WHERE (IDНабораНаГод = @IDНабораНаГод)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Год", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Год", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@МаксКолвоСтудентов", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "МаксКолвоСтудентов", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IDНабораНаГод", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDНабораНаГод", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Год", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Год", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_МаксКолвоСтудентов", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "МаксКолвоСтудентов", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDНабораНаГод", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "IDНабораНаГод", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::kursachMain.Properties.Settings.Default.kursachConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT IDНабораНаГод, Год, МаксКолвоСтудентов FROM dbo.ПланНабора";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(kursachDataSet.ПланНабораDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual kursachDataSet.ПланНабораDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            kursachDataSet.ПланНабораDataTable dataTable = new kursachDataSet.ПланНабораDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(kursachDataSet.ПланНабораDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(kursachDataSet dataSet) {
            return this.Adapter.Update(dataSet, "ПланНабора");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_IDНабораНаГод, string Original_Год, string Original_МаксКолвоСтудентов) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_IDНабораНаГод));
            if ((Original_Год == null)) {
                throw new global::System.ArgumentNullException("Original_Год");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_Год));
            }
            if ((Original_МаксКолвоСтудентов == null)) {
                throw new global::System.ArgumentNullException("Original_МаксКолвоСтудентов");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_МаксКолвоСтудентов));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string Год, string МаксКолвоСтудентов) {
            if ((Год == null)) {
                throw new global::System.ArgumentNullException("Год");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(Год));
            }
            if ((МаксКолвоСтудентов == null)) {
                throw new global::System.ArgumentNullException("МаксКолвоСтудентов");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(МаксКолвоСтудентов));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Год, string МаксКолвоСтудентов, int Original_IDНабораНаГод, string Original_Год, string Original_МаксКолвоСтудентов, int IDНабораНаГод) {
            if ((Год == null)) {
                throw new global::System.ArgumentNullException("Год");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(Год));
            }
            if ((МаксКолвоСтудентов == null)) {
                throw new global::System.ArgumentNullException("МаксКолвоСтудентов");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(МаксКолвоСтудентов));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_IDНабораНаГод));
            if ((Original_Год == null)) {
                throw new global::System.ArgumentNullException("Original_Год");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_Год));
            }
            if ((Original_МаксКолвоСтудентов == null)) {
                throw new global::System.ArgumentNullException("Original_МаксКолвоСтудентов");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Original_МаксКолвоСтудентов));
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(IDНабораНаГод));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Год, string МаксКолвоСтудентов, int Original_IDНабораНаГод, string Original_Год, string Original_МаксКолвоСтудентов) {
            return this.Update(Год, МаксКолвоСтудентов, Original_IDНабораНаГод, Original_Год, Original_МаксКолвоСтудентов, Original_IDНабораНаГод);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ПредприятияTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public ПредприятияTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Предприятия";
            tableMapping.ColumnMappings.Add("ID предприятия", "ID предприятия");
            tableMapping.ColumnMappings.Add("Название", "Название");
            tableMapping.ColumnMappings.Add("УНП", "УНП");
            tableMapping.ColumnMappings.Add("Адрес", "Адрес");
            tableMapping.ColumnMappings.Add("Телефон", "Телефон");
            tableMapping.ColumnMappings.Add("Эл. почта", "Эл_ почта");
            tableMapping.ColumnMappings.Add("Контактное лицо", "Контактное лицо");
            tableMapping.ColumnMappings.Add("IDЗаключенныхДоговоров", "IDЗаключенныхДоговоров");
            tableMapping.ColumnMappings.Add("IDНабораНаГод", "IDНабораНаГод");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[Предприятия] WHERE (([ID предприятия] = @Original_ID_предприятия) AND ([Название] = @Original_Название) AND ([УНП] = @Original_УНП) AND ([Адрес] = @Original_Адрес) AND ([Телефон] = @Original_Телефон) AND ((@p3 = 1 AND [Эл. почта] IS NULL) OR ([Эл. почта] = @p2)) AND ([Контактное лицо] = @Original_Контактное_лицо) AND ([IDЗаключенныхДоговоров] = @Original_IDЗаключенныхДоговоров) AND ([IDНабораНаГод] = @Original_IDНабораНаГод))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID_предприятия", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID предприятия", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Название", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Название", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_УНП", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "УНП", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Адрес", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Адрес", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Телефон", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Телефон", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@p3", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Эл. почта", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@p2", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Эл. почта", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Контактное_лицо", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Контактное лицо", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IDЗаключенныхДоговоров", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDЗаключенныхДоговоров", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IDНабораНаГод", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDНабораНаГод", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[Предприятия] ([Название], [УНП], [Адрес], [Телефон], [Эл. почта], [Контактное лицо], [IDЗаключенныхДоговоров], [IDНабораНаГод]) VALUES (@Название, @УНП, @Адрес, @Телефон, @p1, @Контактное_лицо, @IDЗаключенныхДоговоров, @IDНабораНаГод);
SELECT [ID предприятия], Название, УНП, Адрес, Телефон, [Эл. почта], [Контактное лицо], IDЗаключенныхДоговоров, IDНабораНаГод FROM Предприятия WHERE ([ID предприятия] = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Название", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Название", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@УНП", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "УНП", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Адрес", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Адрес", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Телефон", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Телефон", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@p1", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Эл. почта", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Контактное_лицо", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Контактное лицо", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDЗаключенныхДоговоров", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDЗаключенныхДоговоров", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDНабораНаГод", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDНабораНаГод", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Предприятия] SET [Название] = @Название, [УНП] = @УНП, [Адрес] = @Адрес, [Телефон] = @Телефон, [Эл. почта] = @p1, [Контактное лицо] = @Контактное_лицо, [IDЗаключенныхДоговоров] = @IDЗаключенныхДоговоров, [IDНабораНаГод] = @IDНабораНаГод WHERE (([ID предприятия] = @Original_ID_предприятия) AND ([Название] = @Original_Название) AND ([УНП] = @Original_УНП) AND ([Адрес] = @Original_Адрес) AND ([Телефон] = @Original_Телефон) AND ((@p3 = 1 AND [Эл. почта] IS NULL) OR ([Эл. почта] = @p2)) AND ([Контактное лицо] = @Original_Контактное_лицо) AND ([IDЗаключенныхДоговоров] = @Original_IDЗаключенныхДоговоров) AND ([IDНабораНаГод] = @Original_IDНабораНаГод));
SELECT [ID предприятия], Название, УНП, Адрес, Телефон, [Эл. почта], [Контактное лицо], IDЗаключенныхДоговоров, IDНабораНаГод FROM Предприятия WHERE ([ID предприятия] = @ID_предприятия)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Название", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Название", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@УНП", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "УНП", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Адрес", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Адрес", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Телефон", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Телефон", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@p1", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Эл. почта", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Контактное_лицо", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Контактное лицо", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDЗаключенныхДоговоров", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDЗаключенныхДоговоров", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDНабораНаГод", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDНабораНаГод", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID_предприятия", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID предприятия", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Название", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Название", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_УНП", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "УНП", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Адрес", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Адрес", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Телефон", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Телефон", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@p3", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Эл. почта", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@p2", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Эл. почта", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Контактное_лицо", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Контактное лицо", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IDЗаключенныхДоговоров", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDЗаключенныхДоговоров", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IDНабораНаГод", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDНабораНаГод", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ID_предприятия", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "ID предприятия", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::kursachMain.Properties.Settings.Default.kursachConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT [ID предприятия], Название, УНП, Адрес, Телефон, [Эл. почта], [Контактное " +
                "лицо], IDЗаключенныхДоговоров, IDНабораНаГод FROM dbo.Предприятия";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(kursachDataSet.ПредприятияDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual kursachDataSet.ПредприятияDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            kursachDataSet.ПредприятияDataTable dataTable = new kursachDataSet.ПредприятияDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(kursachDataSet.ПредприятияDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(kursachDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Предприятия");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ID_предприятия, string Original_Название, string Original_УНП, string Original_Адрес, string Original_Телефон, string p2, string Original_Контактное_лицо, int Original_IDЗаключенныхДоговоров, int Original_IDНабораНаГод) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID_предприятия));
            if ((Original_Название == null)) {
                throw new global::System.ArgumentNullException("Original_Название");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_Название));
            }
            if ((Original_УНП == null)) {
                throw new global::System.ArgumentNullException("Original_УНП");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_УНП));
            }
            if ((Original_Адрес == null)) {
                throw new global::System.ArgumentNullException("Original_Адрес");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_Адрес));
            }
            if ((Original_Телефон == null)) {
                throw new global::System.ArgumentNullException("Original_Телефон");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_Телефон));
            }
            if ((p2 == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(p2));
            }
            if ((Original_Контактное_лицо == null)) {
                throw new global::System.ArgumentNullException("Original_Контактное_лицо");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((string)(Original_Контактное_лицо));
            }
            this.Adapter.DeleteCommand.Parameters[8].Value = ((int)(Original_IDЗаключенныхДоговоров));
            this.Adapter.DeleteCommand.Parameters[9].Value = ((int)(Original_IDНабораНаГод));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string Название, string УНП, string Адрес, string Телефон, string p1, string Контактное_лицо, int IDЗаключенныхДоговоров, int IDНабораНаГод) {
            if ((Название == null)) {
                throw new global::System.ArgumentNullException("Название");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(Название));
            }
            if ((УНП == null)) {
                throw new global::System.ArgumentNullException("УНП");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(УНП));
            }
            if ((Адрес == null)) {
                throw new global::System.ArgumentNullException("Адрес");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(Адрес));
            }
            if ((Телефон == null)) {
                throw new global::System.ArgumentNullException("Телефон");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(Телефон));
            }
            if ((p1 == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(p1));
            }
            if ((Контактное_лицо == null)) {
                throw new global::System.ArgumentNullException("Контактное_лицо");
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(Контактное_лицо));
            }
            this.Adapter.InsertCommand.Parameters[6].Value = ((int)(IDЗаключенныхДоговоров));
            this.Adapter.InsertCommand.Parameters[7].Value = ((int)(IDНабораНаГод));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string Название, 
                    string УНП, 
                    string Адрес, 
                    string Телефон, 
                    string p1, 
                    string Контактное_лицо, 
                    int IDЗаключенныхДоговоров, 
                    int IDНабораНаГод, 
                    int Original_ID_предприятия, 
                    string Original_Название, 
                    string Original_УНП, 
                    string Original_Адрес, 
                    string Original_Телефон, 
                    string p2, 
                    string Original_Контактное_лицо, 
                    int Original_IDЗаключенныхДоговоров, 
                    int Original_IDНабораНаГод, 
                    int ID_предприятия) {
            if ((Название == null)) {
                throw new global::System.ArgumentNullException("Название");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(Название));
            }
            if ((УНП == null)) {
                throw new global::System.ArgumentNullException("УНП");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(УНП));
            }
            if ((Адрес == null)) {
                throw new global::System.ArgumentNullException("Адрес");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Адрес));
            }
            if ((Телефон == null)) {
                throw new global::System.ArgumentNullException("Телефон");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Телефон));
            }
            if ((p1 == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(p1));
            }
            if ((Контактное_лицо == null)) {
                throw new global::System.ArgumentNullException("Контактное_лицо");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Контактное_лицо));
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(IDЗаключенныхДоговоров));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(IDНабораНаГод));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(Original_ID_предприятия));
            if ((Original_Название == null)) {
                throw new global::System.ArgumentNullException("Original_Название");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Original_Название));
            }
            if ((Original_УНП == null)) {
                throw new global::System.ArgumentNullException("Original_УНП");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(Original_УНП));
            }
            if ((Original_Адрес == null)) {
                throw new global::System.ArgumentNullException("Original_Адрес");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Original_Адрес));
            }
            if ((Original_Телефон == null)) {
                throw new global::System.ArgumentNullException("Original_Телефон");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(Original_Телефон));
            }
            if ((p2 == null)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(p2));
            }
            if ((Original_Контактное_лицо == null)) {
                throw new global::System.ArgumentNullException("Original_Контактное_лицо");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(Original_Контактное_лицо));
            }
            this.Adapter.UpdateCommand.Parameters[16].Value = ((int)(Original_IDЗаключенныхДоговоров));
            this.Adapter.UpdateCommand.Parameters[17].Value = ((int)(Original_IDНабораНаГод));
            this.Adapter.UpdateCommand.Parameters[18].Value = ((int)(ID_предприятия));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string Название, 
                    string УНП, 
                    string Адрес, 
                    string Телефон, 
                    string p1, 
                    string Контактное_лицо, 
                    int IDЗаключенныхДоговоров, 
                    int IDНабораНаГод, 
                    int Original_ID_предприятия, 
                    string Original_Название, 
                    string Original_УНП, 
                    string Original_Адрес, 
                    string Original_Телефон, 
                    string p2, 
                    string Original_Контактное_лицо, 
                    int Original_IDЗаключенныхДоговоров, 
                    int Original_IDНабораНаГод) {
            return this.Update(Название, УНП, Адрес, Телефон, p1, Контактное_лицо, IDЗаключенныхДоговоров, IDНабораНаГод, Original_ID_предприятия, Original_Название, Original_УНП, Original_Адрес, Original_Телефон, p2, Original_Контактное_лицо, Original_IDЗаключенныхДоговоров, Original_IDНабораНаГод, Original_ID_предприятия);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ПреподавателиTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public ПреподавателиTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Преподаватели";
            tableMapping.ColumnMappings.Add("IDПреподавателя", "IDПреподавателя");
            tableMapping.ColumnMappings.Add("ФИОПреподавателя", "ФИОПреподавателя");
            tableMapping.ColumnMappings.Add("Должность", "Должность");
            tableMapping.ColumnMappings.Add("Кафедра", "Кафедра");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[Преподаватели] WHERE (([IDПреподавателя] = @Original_IDПреподавателя) AND ([ФИОПреподавателя] = @Original_ФИОПреподавателя) AND ((@IsNull_Должность = 1 AND [Должность] IS NULL) OR ([Должность] = @Original_Должность)) AND ((@IsNull_Кафедра = 1 AND [Кафедра] IS NULL) OR ([Кафедра] = @Original_Кафедра)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IDПреподавателя", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDПреподавателя", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ФИОПреподавателя", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ФИОПреподавателя", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Должность", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Должность", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Должность", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Должность", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Кафедра", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Кафедра", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Кафедра", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Кафедра", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Преподаватели] ([ФИОПреподавателя], [Должность], [Кафедра]) VA" +
                "LUES (@ФИОПреподавателя, @Должность, @Кафедра);\r\nSELECT IDПреподавателя, ФИОПреп" +
                "одавателя, Должность, Кафедра FROM Преподаватели WHERE (IDПреподавателя = SCOPE_" +
                "IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ФИОПреподавателя", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ФИОПреподавателя", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Должность", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Должность", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Кафедра", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Кафедра", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Преподаватели] SET [ФИОПреподавателя] = @ФИОПреподавателя, [Должность] = @Должность, [Кафедра] = @Кафедра WHERE (([IDПреподавателя] = @Original_IDПреподавателя) AND ([ФИОПреподавателя] = @Original_ФИОПреподавателя) AND ((@IsNull_Должность = 1 AND [Должность] IS NULL) OR ([Должность] = @Original_Должность)) AND ((@IsNull_Кафедра = 1 AND [Кафедра] IS NULL) OR ([Кафедра] = @Original_Кафедра)));
SELECT IDПреподавателя, ФИОПреподавателя, Должность, Кафедра FROM Преподаватели WHERE (IDПреподавателя = @IDПреподавателя)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ФИОПреподавателя", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ФИОПреподавателя", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Должность", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Должность", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Кафедра", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Кафедра", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IDПреподавателя", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDПреподавателя", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ФИОПреподавателя", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ФИОПреподавателя", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Должность", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Должность", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Должность", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Должность", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Кафедра", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Кафедра", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Кафедра", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Кафедра", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDПреподавателя", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "IDПреподавателя", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::kursachMain.Properties.Settings.Default.kursachConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT IDПреподавателя, ФИОПреподавателя, Должность, Кафедра FROM dbo.Преподавате" +
                "ли";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(kursachDataSet.ПреподавателиDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual kursachDataSet.ПреподавателиDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            kursachDataSet.ПреподавателиDataTable dataTable = new kursachDataSet.ПреподавателиDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(kursachDataSet.ПреподавателиDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(kursachDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Преподаватели");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_IDПреподавателя, string Original_ФИОПреподавателя, string Original_Должность, string Original_Кафедра) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_IDПреподавателя));
            if ((Original_ФИОПреподавателя == null)) {
                throw new global::System.ArgumentNullException("Original_ФИОПреподавателя");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_ФИОПреподавателя));
            }
            if ((Original_Должность == null)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_Должность));
            }
            if ((Original_Кафедра == null)) {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_Кафедра));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string ФИОПреподавателя, string Должность, string Кафедра) {
            if ((ФИОПреподавателя == null)) {
                throw new global::System.ArgumentNullException("ФИОПреподавателя");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(ФИОПреподавателя));
            }
            if ((Должность == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Должность));
            }
            if ((Кафедра == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(Кафедра));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string ФИОПреподавателя, string Должность, string Кафедра, int Original_IDПреподавателя, string Original_ФИОПреподавателя, string Original_Должность, string Original_Кафедра, int IDПреподавателя) {
            if ((ФИОПреподавателя == null)) {
                throw new global::System.ArgumentNullException("ФИОПреподавателя");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(ФИОПреподавателя));
            }
            if ((Должность == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Должность));
            }
            if ((Кафедра == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Кафедра));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Original_IDПреподавателя));
            if ((Original_ФИОПреподавателя == null)) {
                throw new global::System.ArgumentNullException("Original_ФИОПреподавателя");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Original_ФИОПреподавателя));
            }
            if ((Original_Должность == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Original_Должность));
            }
            if ((Original_Кафедра == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Original_Кафедра));
            }
            this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(IDПреподавателя));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string ФИОПреподавателя, string Должность, string Кафедра, int Original_IDПреподавателя, string Original_ФИОПреподавателя, string Original_Должность, string Original_Кафедра) {
            return this.Update(ФИОПреподавателя, Должность, Кафедра, Original_IDПреподавателя, Original_ФИОПреподавателя, Original_Должность, Original_Кафедра, Original_IDПреподавателя);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ПроведениеПрактикиTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public ПроведениеПрактикиTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ПроведениеПрактики";
            tableMapping.ColumnMappings.Add("IDПроведения", "IDПроведения");
            tableMapping.ColumnMappings.Add("Год", "Год");
            tableMapping.ColumnMappings.Add("Производственная", "Производственная");
            tableMapping.ColumnMappings.Add("Преддипломная", "Преддипломная");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[ПроведениеПрактики] WHERE (([IDПроведения] = @Original_IDПрове" +
                "дения) AND ([Год] = @Original_Год) AND ([Производственная] = @Original_Производс" +
                "твенная) AND ([Преддипломная] = @Original_Преддипломная))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IDПроведения", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDПроведения", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Год", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Год", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Производственная", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Производственная", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Преддипломная", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Преддипломная", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[ПроведениеПрактики] ([Год], [Производственная], [Преддипломная]) VALUES (@Год, @Производственная, @Преддипломная);
SELECT IDПроведения, Год, Производственная, Преддипломная FROM ПроведениеПрактики WHERE (IDПроведения = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Год", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Год", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Производственная", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Производственная", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Преддипломная", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Преддипломная", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[ПроведениеПрактики] SET [Год] = @Год, [Производственная] = @Производственная, [Преддипломная] = @Преддипломная WHERE (([IDПроведения] = @Original_IDПроведения) AND ([Год] = @Original_Год) AND ([Производственная] = @Original_Производственная) AND ([Преддипломная] = @Original_Преддипломная));
SELECT IDПроведения, Год, Производственная, Преддипломная FROM ПроведениеПрактики WHERE (IDПроведения = @IDПроведения)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Год", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Год", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Производственная", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Производственная", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Преддипломная", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Преддипломная", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IDПроведения", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDПроведения", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Год", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Год", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Производственная", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Производственная", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Преддипломная", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Преддипломная", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDПроведения", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "IDПроведения", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::kursachMain.Properties.Settings.Default.kursachConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT IDПроведения, Год, Производственная, Преддипломная FROM dbo.ПроведениеПрак" +
                "тики";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(kursachDataSet.ПроведениеПрактикиDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual kursachDataSet.ПроведениеПрактикиDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            kursachDataSet.ПроведениеПрактикиDataTable dataTable = new kursachDataSet.ПроведениеПрактикиDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(kursachDataSet.ПроведениеПрактикиDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(kursachDataSet dataSet) {
            return this.Adapter.Update(dataSet, "ПроведениеПрактики");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_IDПроведения, string Original_Год, string Original_Производственная, string Original_Преддипломная) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_IDПроведения));
            if ((Original_Год == null)) {
                throw new global::System.ArgumentNullException("Original_Год");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_Год));
            }
            if ((Original_Производственная == null)) {
                throw new global::System.ArgumentNullException("Original_Производственная");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_Производственная));
            }
            if ((Original_Преддипломная == null)) {
                throw new global::System.ArgumentNullException("Original_Преддипломная");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_Преддипломная));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string Год, string Производственная, string Преддипломная) {
            if ((Год == null)) {
                throw new global::System.ArgumentNullException("Год");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(Год));
            }
            if ((Производственная == null)) {
                throw new global::System.ArgumentNullException("Производственная");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Производственная));
            }
            if ((Преддипломная == null)) {
                throw new global::System.ArgumentNullException("Преддипломная");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(Преддипломная));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Год, string Производственная, string Преддипломная, int Original_IDПроведения, string Original_Год, string Original_Производственная, string Original_Преддипломная, int IDПроведения) {
            if ((Год == null)) {
                throw new global::System.ArgumentNullException("Год");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(Год));
            }
            if ((Производственная == null)) {
                throw new global::System.ArgumentNullException("Производственная");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Производственная));
            }
            if ((Преддипломная == null)) {
                throw new global::System.ArgumentNullException("Преддипломная");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Преддипломная));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Original_IDПроведения));
            if ((Original_Год == null)) {
                throw new global::System.ArgumentNullException("Original_Год");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Original_Год));
            }
            if ((Original_Производственная == null)) {
                throw new global::System.ArgumentNullException("Original_Производственная");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_Производственная));
            }
            if ((Original_Преддипломная == null)) {
                throw new global::System.ArgumentNullException("Original_Преддипломная");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Original_Преддипломная));
            }
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(IDПроведения));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Год, string Производственная, string Преддипломная, int Original_IDПроведения, string Original_Год, string Original_Производственная, string Original_Преддипломная) {
            return this.Update(Год, Производственная, Преддипломная, Original_IDПроведения, Original_Год, Original_Производственная, Original_Преддипломная, Original_IDПроведения);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class СпециальностиTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public СпециальностиTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Специальности";
            tableMapping.ColumnMappings.Add("IDСпециальности", "IDСпециальности");
            tableMapping.ColumnMappings.Add("НомерСпециальности", "НомерСпециальности");
            tableMapping.ColumnMappings.Add("НазваниеСпециальности", "НазваниеСпециальности");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Специальности] WHERE (([IDСпециальности] = @Original_IDСпециал" +
                "ьности) AND ([НомерСпециальности] = @Original_НомерСпециальности) AND ([Название" +
                "Специальности] = @Original_НазваниеСпециальности))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IDСпециальности", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDСпециальности", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_НомерСпециальности", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НомерСпециальности", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_НазваниеСпециальности", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НазваниеСпециальности", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[Специальности] ([НомерСпециальности], [НазваниеСпециальности]) VALUES (@НомерСпециальности, @НазваниеСпециальности);
SELECT IDСпециальности, НомерСпециальности, НазваниеСпециальности FROM Специальности WHERE (IDСпециальности = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@НомерСпециальности", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НомерСпециальности", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@НазваниеСпециальности", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НазваниеСпециальности", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Специальности] SET [НомерСпециальности] = @НомерСпециальности, [НазваниеСпециальности] = @НазваниеСпециальности WHERE (([IDСпециальности] = @Original_IDСпециальности) AND ([НомерСпециальности] = @Original_НомерСпециальности) AND ([НазваниеСпециальности] = @Original_НазваниеСпециальности));
SELECT IDСпециальности, НомерСпециальности, НазваниеСпециальности FROM Специальности WHERE (IDСпециальности = @IDСпециальности)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@НомерСпециальности", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НомерСпециальности", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@НазваниеСпециальности", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НазваниеСпециальности", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IDСпециальности", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDСпециальности", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_НомерСпециальности", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НомерСпециальности", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_НазваниеСпециальности", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НазваниеСпециальности", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDСпециальности", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "IDСпециальности", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::kursachMain.Properties.Settings.Default.kursachConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT IDСпециальности, НомерСпециальности, НазваниеСпециальности FROM dbo.Специа" +
                "льности";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(kursachDataSet.СпециальностиDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual kursachDataSet.СпециальностиDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            kursachDataSet.СпециальностиDataTable dataTable = new kursachDataSet.СпециальностиDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(kursachDataSet.СпециальностиDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(kursachDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Специальности");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_IDСпециальности, string Original_НомерСпециальности, string Original_НазваниеСпециальности) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_IDСпециальности));
            if ((Original_НомерСпециальности == null)) {
                throw new global::System.ArgumentNullException("Original_НомерСпециальности");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_НомерСпециальности));
            }
            if ((Original_НазваниеСпециальности == null)) {
                throw new global::System.ArgumentNullException("Original_НазваниеСпециальности");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_НазваниеСпециальности));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string НомерСпециальности, string НазваниеСпециальности) {
            if ((НомерСпециальности == null)) {
                throw new global::System.ArgumentNullException("НомерСпециальности");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(НомерСпециальности));
            }
            if ((НазваниеСпециальности == null)) {
                throw new global::System.ArgumentNullException("НазваниеСпециальности");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(НазваниеСпециальности));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string НомерСпециальности, string НазваниеСпециальности, int Original_IDСпециальности, string Original_НомерСпециальности, string Original_НазваниеСпециальности, int IDСпециальности) {
            if ((НомерСпециальности == null)) {
                throw new global::System.ArgumentNullException("НомерСпециальности");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(НомерСпециальности));
            }
            if ((НазваниеСпециальности == null)) {
                throw new global::System.ArgumentNullException("НазваниеСпециальности");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(НазваниеСпециальности));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_IDСпециальности));
            if ((Original_НомерСпециальности == null)) {
                throw new global::System.ArgumentNullException("Original_НомерСпециальности");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_НомерСпециальности));
            }
            if ((Original_НазваниеСпециальности == null)) {
                throw new global::System.ArgumentNullException("Original_НазваниеСпециальности");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Original_НазваниеСпециальности));
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(IDСпециальности));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string НомерСпециальности, string НазваниеСпециальности, int Original_IDСпециальности, string Original_НомерСпециальности, string Original_НазваниеСпециальности) {
            return this.Update(НомерСпециальности, НазваниеСпециальности, Original_IDСпециальности, Original_НомерСпециальности, Original_НазваниеСпециальности, Original_IDСпециальности);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class СтудентыTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public СтудентыTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Студенты";
            tableMapping.ColumnMappings.Add("IDСтудента", "IDСтудента");
            tableMapping.ColumnMappings.Add("ФИОСтудента", "ФИОСтудента");
            tableMapping.ColumnMappings.Add("IDГруппы", "IDГруппы");
            tableMapping.ColumnMappings.Add("IDСпециальности", "IDСпециальности");
            tableMapping.ColumnMappings.Add("НомерТелефона", "НомерТелефона");
            tableMapping.ColumnMappings.Add("НомерЗачетки", "НомерЗачетки");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[Студенты] WHERE (([IDСтудента] = @Original_IDСтудента) AND ([ФИОСтудента] = @Original_ФИОСтудента) AND ([IDГруппы] = @Original_IDГруппы) AND ([IDСпециальности] = @Original_IDСпециальности) AND ((@IsNull_НомерТелефона = 1 AND [НомерТелефона] IS NULL) OR ([НомерТелефона] = @Original_НомерТелефона)) AND ([НомерЗачетки] = @Original_НомерЗачетки))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IDСтудента", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDСтудента", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ФИОСтудента", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ФИОСтудента", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IDГруппы", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDГруппы", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IDСпециальности", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDСпециальности", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_НомерТелефона", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НомерТелефона", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_НомерТелефона", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НомерТелефона", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_НомерЗачетки", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НомерЗачетки", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[Студенты] ([ФИОСтудента], [IDГруппы], [IDСпециальности], [НомерТелефона], [НомерЗачетки]) VALUES (@ФИОСтудента, @IDГруппы, @IDСпециальности, @НомерТелефона, @НомерЗачетки);
SELECT IDСтудента, ФИОСтудента, IDГруппы, IDСпециальности, НомерТелефона, НомерЗачетки FROM Студенты WHERE (IDСтудента = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ФИОСтудента", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ФИОСтудента", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDГруппы", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDГруппы", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDСпециальности", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDСпециальности", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@НомерТелефона", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НомерТелефона", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@НомерЗачетки", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НомерЗачетки", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Студенты] SET [ФИОСтудента] = @ФИОСтудента, [IDГруппы] = @IDГруппы, [IDСпециальности] = @IDСпециальности, [НомерТелефона] = @НомерТелефона, [НомерЗачетки] = @НомерЗачетки WHERE (([IDСтудента] = @Original_IDСтудента) AND ([ФИОСтудента] = @Original_ФИОСтудента) AND ([IDГруппы] = @Original_IDГруппы) AND ([IDСпециальности] = @Original_IDСпециальности) AND ((@IsNull_НомерТелефона = 1 AND [НомерТелефона] IS NULL) OR ([НомерТелефона] = @Original_НомерТелефона)) AND ([НомерЗачетки] = @Original_НомерЗачетки));
SELECT IDСтудента, ФИОСтудента, IDГруппы, IDСпециальности, НомерТелефона, НомерЗачетки FROM Студенты WHERE (IDСтудента = @IDСтудента)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ФИОСтудента", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ФИОСтудента", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDГруппы", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDГруппы", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDСпециальности", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDСпециальности", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@НомерТелефона", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НомерТелефона", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@НомерЗачетки", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НомерЗачетки", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IDСтудента", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDСтудента", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ФИОСтудента", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ФИОСтудента", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IDГруппы", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDГруппы", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IDСпециальности", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDСпециальности", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_НомерТелефона", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НомерТелефона", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_НомерТелефона", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НомерТелефона", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_НомерЗачетки", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "НомерЗачетки", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDСтудента", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "IDСтудента", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::kursachMain.Properties.Settings.Default.kursachConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT IDСтудента, ФИОСтудента, IDГруппы, IDСпециальности, НомерТелефона, НомерЗа" +
                "четки FROM dbo.Студенты";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(kursachDataSet.СтудентыDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual kursachDataSet.СтудентыDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            kursachDataSet.СтудентыDataTable dataTable = new kursachDataSet.СтудентыDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(kursachDataSet.СтудентыDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(kursachDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Студенты");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_IDСтудента, string Original_ФИОСтудента, int Original_IDГруппы, int Original_IDСпециальности, string Original_НомерТелефона, string Original_НомерЗачетки) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_IDСтудента));
            if ((Original_ФИОСтудента == null)) {
                throw new global::System.ArgumentNullException("Original_ФИОСтудента");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_ФИОСтудента));
            }
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_IDГруппы));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((int)(Original_IDСпециальности));
            if ((Original_НомерТелефона == null)) {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_НомерТелефона));
            }
            if ((Original_НомерЗачетки == null)) {
                throw new global::System.ArgumentNullException("Original_НомерЗачетки");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_НомерЗачетки));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string ФИОСтудента, int IDГруппы, int IDСпециальности, string НомерТелефона, string НомерЗачетки) {
            if ((ФИОСтудента == null)) {
                throw new global::System.ArgumentNullException("ФИОСтудента");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(ФИОСтудента));
            }
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(IDГруппы));
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(IDСпециальности));
            if ((НомерТелефона == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(НомерТелефона));
            }
            if ((НомерЗачетки == null)) {
                throw new global::System.ArgumentNullException("НомерЗачетки");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(НомерЗачетки));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string ФИОСтудента, int IDГруппы, int IDСпециальности, string НомерТелефона, string НомерЗачетки, int Original_IDСтудента, string Original_ФИОСтудента, int Original_IDГруппы, int Original_IDСпециальности, string Original_НомерТелефона, string Original_НомерЗачетки, int IDСтудента) {
            if ((ФИОСтудента == null)) {
                throw new global::System.ArgumentNullException("ФИОСтудента");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(ФИОСтудента));
            }
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(IDГруппы));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(IDСпециальности));
            if ((НомерТелефона == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(НомерТелефона));
            }
            if ((НомерЗачетки == null)) {
                throw new global::System.ArgumentNullException("НомерЗачетки");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(НомерЗачетки));
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(Original_IDСтудента));
            if ((Original_ФИОСтудента == null)) {
                throw new global::System.ArgumentNullException("Original_ФИОСтудента");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Original_ФИОСтудента));
            }
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(Original_IDГруппы));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(Original_IDСпециальности));
            if ((Original_НомерТелефона == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(Original_НомерТелефона));
            }
            if ((Original_НомерЗачетки == null)) {
                throw new global::System.ArgumentNullException("Original_НомерЗачетки");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Original_НомерЗачетки));
            }
            this.Adapter.UpdateCommand.Parameters[12].Value = ((int)(IDСтудента));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string ФИОСтудента, int IDГруппы, int IDСпециальности, string НомерТелефона, string НомерЗачетки, int Original_IDСтудента, string Original_ФИОСтудента, int Original_IDГруппы, int Original_IDСпециальности, string Original_НомерТелефона, string Original_НомерЗачетки) {
            return this.Update(ФИОСтудента, IDГруппы, IDСпециальности, НомерТелефона, НомерЗачетки, Original_IDСтудента, Original_ФИОСтудента, Original_IDГруппы, Original_IDСпециальности, Original_НомерТелефона, Original_НомерЗачетки, Original_IDСтудента);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Текущая_практикаTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public Текущая_практикаTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Текущая практика";
            tableMapping.ColumnMappings.Add("IDТекущейПрактики", "IDТекущейПрактики");
            tableMapping.ColumnMappings.Add("IDДоговора", "IDДоговора");
            tableMapping.ColumnMappings.Add("IDВидаПрактики", "IDВидаПрактики");
            tableMapping.ColumnMappings.Add("IDПреподавателя", "IDПреподавателя");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Текущая практика] WHERE (([IDТекущейПрактики] = @Original_IDТе" +
                "кущейПрактики) AND ([IDДоговора] = @Original_IDДоговора) AND ([IDВидаПрактики] =" +
                " @Original_IDВидаПрактики) AND ([IDПреподавателя] = @Original_IDПреподавателя))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IDТекущейПрактики", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDТекущейПрактики", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IDДоговора", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDДоговора", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IDВидаПрактики", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDВидаПрактики", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IDПреподавателя", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDПреподавателя", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[Текущая практика] ([IDДоговора], [IDВидаПрактики], [IDПреподавателя]) VALUES (@IDДоговора, @IDВидаПрактики, @IDПреподавателя);
SELECT IDТекущейПрактики, IDДоговора, IDВидаПрактики, IDПреподавателя FROM [Текущая практика] WHERE (IDТекущейПрактики = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDДоговора", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDДоговора", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDВидаПрактики", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDВидаПрактики", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDПреподавателя", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDПреподавателя", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Текущая практика] SET [IDДоговора] = @IDДоговора, [IDВидаПрактики] = @IDВидаПрактики, [IDПреподавателя] = @IDПреподавателя WHERE (([IDТекущейПрактики] = @Original_IDТекущейПрактики) AND ([IDДоговора] = @Original_IDДоговора) AND ([IDВидаПрактики] = @Original_IDВидаПрактики) AND ([IDПреподавателя] = @Original_IDПреподавателя));
SELECT IDТекущейПрактики, IDДоговора, IDВидаПрактики, IDПреподавателя FROM [Текущая практика] WHERE (IDТекущейПрактики = @IDТекущейПрактики)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDДоговора", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDДоговора", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDВидаПрактики", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDВидаПрактики", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDПреподавателя", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDПреподавателя", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IDТекущейПрактики", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDТекущейПрактики", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IDДоговора", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDДоговора", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IDВидаПрактики", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDВидаПрактики", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IDПреподавателя", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IDПреподавателя", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IDТекущейПрактики", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "IDТекущейПрактики", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::kursachMain.Properties.Settings.Default.kursachConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT IDТекущейПрактики, IDДоговора, IDВидаПрактики, IDПреподавателя FROM dbo.[Т" +
                "екущая практика]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(kursachDataSet.Текущая_практикаDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual kursachDataSet.Текущая_практикаDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            kursachDataSet.Текущая_практикаDataTable dataTable = new kursachDataSet.Текущая_практикаDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(kursachDataSet.Текущая_практикаDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(kursachDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Текущая практика");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_IDТекущейПрактики, int Original_IDДоговора, int Original_IDВидаПрактики, int Original_IDПреподавателя) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_IDТекущейПрактики));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_IDДоговора));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_IDВидаПрактики));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((int)(Original_IDПреподавателя));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int IDДоговора, int IDВидаПрактики, int IDПреподавателя) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(IDДоговора));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(IDВидаПрактики));
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(IDПреподавателя));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int IDДоговора, int IDВидаПрактики, int IDПреподавателя, int Original_IDТекущейПрактики, int Original_IDДоговора, int Original_IDВидаПрактики, int Original_IDПреподавателя, int IDТекущейПрактики) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(IDДоговора));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(IDВидаПрактики));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(IDПреподавателя));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Original_IDТекущейПрактики));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_IDДоговора));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(Original_IDВидаПрактики));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(Original_IDПреподавателя));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(IDТекущейПрактики));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int IDДоговора, int IDВидаПрактики, int IDПреподавателя, int Original_IDТекущейПрактики, int Original_IDДоговора, int Original_IDВидаПрактики, int Original_IDПреподавателя) {
            return this.Update(IDДоговора, IDВидаПрактики, IDПреподавателя, Original_IDТекущейПрактики, Original_IDДоговора, Original_IDВидаПрактики, Original_IDПреподавателя, Original_IDТекущейПрактики);
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private Виды_практикиTableAdapter _виды_практикиTableAdapter;
        
        private ГруппыTableAdapter _группыTableAdapter;
        
        private ДоговорыTableAdapter _договорыTableAdapter;
        
        private ПланНабораTableAdapter _планНабораTableAdapter;
        
        private ПредприятияTableAdapter _предприятияTableAdapter;
        
        private ПреподавателиTableAdapter _преподавателиTableAdapter;
        
        private ПроведениеПрактикиTableAdapter _проведениеПрактикиTableAdapter;
        
        private СпециальностиTableAdapter _специальностиTableAdapter;
        
        private СтудентыTableAdapter _студентыTableAdapter;
        
        private Текущая_практикаTableAdapter _текущая_практикаTableAdapter;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public Виды_практикиTableAdapter Виды_практикиTableAdapter {
            get {
                return this._виды_практикиTableAdapter;
            }
            set {
                this._виды_практикиTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public ГруппыTableAdapter ГруппыTableAdapter {
            get {
                return this._группыTableAdapter;
            }
            set {
                this._группыTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public ДоговорыTableAdapter ДоговорыTableAdapter {
            get {
                return this._договорыTableAdapter;
            }
            set {
                this._договорыTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public ПланНабораTableAdapter ПланНабораTableAdapter {
            get {
                return this._планНабораTableAdapter;
            }
            set {
                this._планНабораTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public ПредприятияTableAdapter ПредприятияTableAdapter {
            get {
                return this._предприятияTableAdapter;
            }
            set {
                this._предприятияTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public ПреподавателиTableAdapter ПреподавателиTableAdapter {
            get {
                return this._преподавателиTableAdapter;
            }
            set {
                this._преподавателиTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public ПроведениеПрактикиTableAdapter ПроведениеПрактикиTableAdapter {
            get {
                return this._проведениеПрактикиTableAdapter;
            }
            set {
                this._проведениеПрактикиTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public СпециальностиTableAdapter СпециальностиTableAdapter {
            get {
                return this._специальностиTableAdapter;
            }
            set {
                this._специальностиTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public СтудентыTableAdapter СтудентыTableAdapter {
            get {
                return this._студентыTableAdapter;
            }
            set {
                this._студентыTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public Текущая_практикаTableAdapter Текущая_практикаTableAdapter {
            get {
                return this._текущая_практикаTableAdapter;
            }
            set {
                this._текущая_практикаTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                if (((this._виды_практикиTableAdapter != null) 
                            && (this._виды_практикиTableAdapter.Connection != null))) {
                    return this._виды_практикиTableAdapter.Connection;
                }
                if (((this._группыTableAdapter != null) 
                            && (this._группыTableAdapter.Connection != null))) {
                    return this._группыTableAdapter.Connection;
                }
                if (((this._договорыTableAdapter != null) 
                            && (this._договорыTableAdapter.Connection != null))) {
                    return this._договорыTableAdapter.Connection;
                }
                if (((this._планНабораTableAdapter != null) 
                            && (this._планНабораTableAdapter.Connection != null))) {
                    return this._планНабораTableAdapter.Connection;
                }
                if (((this._предприятияTableAdapter != null) 
                            && (this._предприятияTableAdapter.Connection != null))) {
                    return this._предприятияTableAdapter.Connection;
                }
                if (((this._преподавателиTableAdapter != null) 
                            && (this._преподавателиTableAdapter.Connection != null))) {
                    return this._преподавателиTableAdapter.Connection;
                }
                if (((this._проведениеПрактикиTableAdapter != null) 
                            && (this._проведениеПрактикиTableAdapter.Connection != null))) {
                    return this._проведениеПрактикиTableAdapter.Connection;
                }
                if (((this._специальностиTableAdapter != null) 
                            && (this._специальностиTableAdapter.Connection != null))) {
                    return this._специальностиTableAdapter.Connection;
                }
                if (((this._студентыTableAdapter != null) 
                            && (this._студентыTableAdapter.Connection != null))) {
                    return this._студентыTableAdapter.Connection;
                }
                if (((this._текущая_практикаTableAdapter != null) 
                            && (this._текущая_практикаTableAdapter.Connection != null))) {
                    return this._текущая_практикаTableAdapter.Connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                if ((this._виды_практикиTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._группыTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._договорыTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._планНабораTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._предприятияTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._преподавателиTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._проведениеПрактикиTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._специальностиTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._студентыTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._текущая_практикаTableAdapter != null)) {
                    count = (count + 1);
                }
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private int UpdateUpdatedRows(kursachDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._группыTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Группы.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._группыTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._специальностиTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Специальности.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._специальностиTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._проведениеПрактикиTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.ПроведениеПрактики.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._проведениеПрактикиTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._студентыTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Студенты.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._студентыTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._виды_практикиTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Виды_практики.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._виды_практикиTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._договорыTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Договоры.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._договорыTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._планНабораTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.ПланНабора.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._планНабораTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._преподавателиTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Преподаватели.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._преподавателиTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._предприятияTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Предприятия.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._предприятияTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._текущая_практикаTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Текущая_практика.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._текущая_практикаTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private int UpdateInsertedRows(kursachDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._группыTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Группы.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._группыTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._специальностиTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Специальности.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._специальностиTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._проведениеПрактикиTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.ПроведениеПрактики.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._проведениеПрактикиTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._студентыTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Студенты.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._студентыTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._виды_практикиTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Виды_практики.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._виды_практикиTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._договорыTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Договоры.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._договорыTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._планНабораTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.ПланНабора.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._планНабораTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._преподавателиTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Преподаватели.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._преподавателиTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._предприятияTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Предприятия.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._предприятияTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._текущая_практикаTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Текущая_практика.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._текущая_практикаTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private int UpdateDeletedRows(kursachDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            if ((this._текущая_практикаTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Текущая_практика.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._текущая_практикаTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._предприятияTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Предприятия.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._предприятияTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._преподавателиTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Преподаватели.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._преподавателиTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._планНабораTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.ПланНабора.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._планНабораTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._договорыTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Договоры.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._договорыTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._виды_практикиTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Виды_практики.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._виды_практикиTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._студентыTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Студенты.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._студентыTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._проведениеПрактикиTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.ПроведениеПрактики.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._проведениеПрактикиTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._специальностиTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Специальности.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._специальностиTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._группыTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Группы.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._группыTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public virtual int UpdateAll(kursachDataSet dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            if (((this._виды_практикиTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._виды_практикиTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("Все адаптеры таблицы, управляемые диспетчером адаптера таблицы TableAdapterManage" +
                        "r, должны использовать одинаковую строку подключения.");
            }
            if (((this._группыTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._группыTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("Все адаптеры таблицы, управляемые диспетчером адаптера таблицы TableAdapterManage" +
                        "r, должны использовать одинаковую строку подключения.");
            }
            if (((this._договорыTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._договорыTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("Все адаптеры таблицы, управляемые диспетчером адаптера таблицы TableAdapterManage" +
                        "r, должны использовать одинаковую строку подключения.");
            }
            if (((this._планНабораTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._планНабораTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("Все адаптеры таблицы, управляемые диспетчером адаптера таблицы TableAdapterManage" +
                        "r, должны использовать одинаковую строку подключения.");
            }
            if (((this._предприятияTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._предприятияTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("Все адаптеры таблицы, управляемые диспетчером адаптера таблицы TableAdapterManage" +
                        "r, должны использовать одинаковую строку подключения.");
            }
            if (((this._преподавателиTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._преподавателиTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("Все адаптеры таблицы, управляемые диспетчером адаптера таблицы TableAdapterManage" +
                        "r, должны использовать одинаковую строку подключения.");
            }
            if (((this._проведениеПрактикиTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._проведениеПрактикиTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("Все адаптеры таблицы, управляемые диспетчером адаптера таблицы TableAdapterManage" +
                        "r, должны использовать одинаковую строку подключения.");
            }
            if (((this._специальностиTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._специальностиTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("Все адаптеры таблицы, управляемые диспетчером адаптера таблицы TableAdapterManage" +
                        "r, должны использовать одинаковую строку подключения.");
            }
            if (((this._студентыTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._студентыTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("Все адаптеры таблицы, управляемые диспетчером адаптера таблицы TableAdapterManage" +
                        "r, должны использовать одинаковую строку подключения.");
            }
            if (((this._текущая_практикаTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._текущая_практикаTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("Все адаптеры таблицы, управляемые диспетчером адаптера таблицы TableAdapterManage" +
                        "r, должны использовать одинаковую строку подключения.");
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager не содержит сведений о подключении. Укажите для каждого адапт" +
                        "ера таблицы TableAdapterManager допустимый экземпляр адаптера таблицы.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("Не удается начать транзакцию. Текущее соединение данных не поддерживает транзакци" +
                        "и или текущее состояние не позволяет начать транзакцию.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                if ((this._виды_практикиTableAdapter != null)) {
                    revertConnections.Add(this._виды_практикиTableAdapter, this._виды_практикиTableAdapter.Connection);
                    this._виды_практикиTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._виды_практикиTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._виды_практикиTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._виды_практикиTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._виды_практикиTableAdapter.Adapter);
                    }
                }
                if ((this._группыTableAdapter != null)) {
                    revertConnections.Add(this._группыTableAdapter, this._группыTableAdapter.Connection);
                    this._группыTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._группыTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._группыTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._группыTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._группыTableAdapter.Adapter);
                    }
                }
                if ((this._договорыTableAdapter != null)) {
                    revertConnections.Add(this._договорыTableAdapter, this._договорыTableAdapter.Connection);
                    this._договорыTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._договорыTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._договорыTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._договорыTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._договорыTableAdapter.Adapter);
                    }
                }
                if ((this._планНабораTableAdapter != null)) {
                    revertConnections.Add(this._планНабораTableAdapter, this._планНабораTableAdapter.Connection);
                    this._планНабораTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._планНабораTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._планНабораTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._планНабораTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._планНабораTableAdapter.Adapter);
                    }
                }
                if ((this._предприятияTableAdapter != null)) {
                    revertConnections.Add(this._предприятияTableAdapter, this._предприятияTableAdapter.Connection);
                    this._предприятияTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._предприятияTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._предприятияTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._предприятияTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._предприятияTableAdapter.Adapter);
                    }
                }
                if ((this._преподавателиTableAdapter != null)) {
                    revertConnections.Add(this._преподавателиTableAdapter, this._преподавателиTableAdapter.Connection);
                    this._преподавателиTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._преподавателиTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._преподавателиTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._преподавателиTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._преподавателиTableAdapter.Adapter);
                    }
                }
                if ((this._проведениеПрактикиTableAdapter != null)) {
                    revertConnections.Add(this._проведениеПрактикиTableAdapter, this._проведениеПрактикиTableAdapter.Connection);
                    this._проведениеПрактикиTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._проведениеПрактикиTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._проведениеПрактикиTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._проведениеПрактикиTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._проведениеПрактикиTableAdapter.Adapter);
                    }
                }
                if ((this._специальностиTableAdapter != null)) {
                    revertConnections.Add(this._специальностиTableAdapter, this._специальностиTableAdapter.Connection);
                    this._специальностиTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._специальностиTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._специальностиTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._специальностиTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._специальностиTableAdapter.Adapter);
                    }
                }
                if ((this._студентыTableAdapter != null)) {
                    revertConnections.Add(this._студентыTableAdapter, this._студентыTableAdapter.Connection);
                    this._студентыTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._студентыTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._студентыTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._студентыTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._студентыTableAdapter.Adapter);
                    }
                }
                if ((this._текущая_практикаTableAdapter != null)) {
                    revertConnections.Add(this._текущая_практикаTableAdapter, this._текущая_практикаTableAdapter.Connection);
                    this._текущая_практикаTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._текущая_практикаTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._текущая_практикаTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._текущая_практикаTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._текущая_практикаTableAdapter.Adapter);
                    }
                }
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((this._виды_практикиTableAdapter != null)) {
                    this._виды_практикиTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._виды_практикиTableAdapter]));
                    this._виды_практикиTableAdapter.Transaction = null;
                }
                if ((this._группыTableAdapter != null)) {
                    this._группыTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._группыTableAdapter]));
                    this._группыTableAdapter.Transaction = null;
                }
                if ((this._договорыTableAdapter != null)) {
                    this._договорыTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._договорыTableAdapter]));
                    this._договорыTableAdapter.Transaction = null;
                }
                if ((this._планНабораTableAdapter != null)) {
                    this._планНабораTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._планНабораTableAdapter]));
                    this._планНабораTableAdapter.Transaction = null;
                }
                if ((this._предприятияTableAdapter != null)) {
                    this._предприятияTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._предприятияTableAdapter]));
                    this._предприятияTableAdapter.Transaction = null;
                }
                if ((this._преподавателиTableAdapter != null)) {
                    this._преподавателиTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._преподавателиTableAdapter]));
                    this._преподавателиTableAdapter.Transaction = null;
                }
                if ((this._проведениеПрактикиTableAdapter != null)) {
                    this._проведениеПрактикиTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._проведениеПрактикиTableAdapter]));
                    this._проведениеПрактикиTableAdapter.Transaction = null;
                }
                if ((this._специальностиTableAdapter != null)) {
                    this._специальностиTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._специальностиTableAdapter]));
                    this._специальностиTableAdapter.Transaction = null;
                }
                if ((this._студентыTableAdapter != null)) {
                    this._студентыTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._студентыTableAdapter]));
                    this._студентыTableAdapter.Transaction = null;
                }
                if ((this._текущая_практикаTableAdapter != null)) {
                    this._текущая_практикаTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._текущая_практикаTableAdapter]));
                    this._текущая_практикаTableAdapter.Transaction = null;
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private global::System.Data.DataRow GetRoot(global::System.Data.DataRow row, out int distance) {
                global::System.Diagnostics.Debug.Assert((row != null));
                global::System.Data.DataRow root = row;
                distance = 0;

                global::System.Collections.Generic.IDictionary<global::System.Data.DataRow, global::System.Data.DataRow> traversedRows = new global::System.Collections.Generic.Dictionary<global::System.Data.DataRow, global::System.Data.DataRow>();
                traversedRows[row] = row;

                global::System.Data.DataRow parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((parent != null) 
                            && (traversedRows.ContainsKey(parent) == false)); 
                ) {
                    distance = (distance + 1);
                    root = parent;
                    traversedRows[parent] = parent;
                    parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }

                if ((distance == 0)) {
                    traversedRows.Clear();
                    traversedRows[row] = row;
                    parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    for (
                    ; ((parent != null) 
                                && (traversedRows.ContainsKey(parent) == false)); 
                    ) {
                        distance = (distance + 1);
                        root = parent;
                        traversedRows[parent] = parent;
                        parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }

                return root;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                int distance1 = 0;
                global::System.Data.DataRow root1 = this.GetRoot(row1, out distance1);

                int distance2 = 0;
                global::System.Data.DataRow root2 = this.GetRoot(row2, out distance2);

                if (object.ReferenceEquals(root1, root2)) {
                    return (this._childFirst * distance1.CompareTo(distance2));
                }
                else {
                    global::System.Diagnostics.Debug.Assert(((root1.Table != null) 
                                    && (root2.Table != null)));
                    if ((root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2))) {
                        return -1;
                    }
                    else {
                        return 1;
                    }
                }
            }
        }
    }
}

#pragma warning restore 1591